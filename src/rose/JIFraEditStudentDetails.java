/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rose;

import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joel
 */
public class JIFraEditStudentDetails extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIFraEditStudentDetails
     */
    Connection con = null;
    Statement stmt = null;
    Statement stmt1 = null;
    Statement stmt2 = null;
    ResultSet rs = null;
    ResultSet rs1 = null;
    String query, text, gender;
    String[] order_no;
    DefaultTableModel model1;
    int rowcount = 0, item_no = 0, slno = 0, stsl = 0, classno = 0, temp = 0;
     
    String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

    public JIFraEditStudentDetails() {
        try {
            initComponents();
            ButtonGroup bg1 = new ButtonGroup();
            bg1.add(jrbtnMale);
            bg1.add(jrbtnFemale);
            model1 = (DefaultTableModel) jtblItem.getModel();
            jbtnSave1.setVisible(false);
            jtxtSchoolName.setText(Global.getSchoolname());
            con = new DBConnection().connect();
            stmt = con.createStatement();
            query = "select class from mst_class where flag!='D'";
            rs = stmt.executeQuery(query);
            jcmbClass.addItem("");
            while (rs.next()) {
                jcmbClass.addItem(rs.getString(1));
            }
            query = "select order_no,student_name from mst_student where school_no = '" + Global.getSchoolno() + "' and flag!='D'";
            rs = stmt.executeQuery(query);
            jcmbStudentName.addItem("");
            while (rs.next()) {
                jcmbStudentName.addItem(rs.getString(1) + "   " + rs.getString(2));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    public void populateItem(String gender, String c) {
        try {
            con = new DBConnection().connect();
            stmt = con.createStatement();
            jcmbItemName.removeAllItems();
            jcmbItemName.addItem("");
            query = "select distinct(b.set_name) from mst_school_item_price a join mst_set b on a.set_no = b.set_no join mst_item c on a.item_no = c.item_no and  a.school_no = '" + Global.getSchoolno() + "' and c.gender in ('" + gender + "','Common') and a.class_from <= '" + c + "' and a.class_to >= '" + c + "'  and a.flag!='D' and b.flag!='D' and c.flag!='D'";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                jcmbItemName.addItem(rs.getString(1));
            }
            query = "select a.item_no,b.item_name from mst_school_item_price a join mst_item b on a.item_no = b.item_no and  a.school_no = '" + Global.getSchoolno() + "' and b.gender in ('" + gender + "','Common') and a.class_from <= '" + c + "' and a.class_to >= '" + c + "'  and a.flag!='D' and b.flag!='D'";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                jcmbItemName.addItem(rs.getString(2));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtxtSchoolName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jrbtnMale = new javax.swing.JRadioButton();
        jrbtnFemale = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtxtDivision = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jtxtPhone = new javax.swing.JTextField();
        jcmbStudentName = new javax.swing.JComboBox();
        jbtnShow = new javax.swing.JButton();
        jtxtOrderNo = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jtxtStudentName = new javax.swing.JTextField();
        jcmbClass = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblShirt = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblPant = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtblSkirt = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtblCoat = new javax.swing.JTable();
        jbtnSave2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jcmbItemName = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        jtxtQty = new javax.swing.JTextField();
        jbtnAdd = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtblItem = new javax.swing.JTable();
        jbtnSave1 = new javax.swing.JButton();
        jbtnEdit = new javax.swing.JButton();
        jbtnDelete1 = new javax.swing.JButton();
        jbtnDelete2 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Edit Student Details");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("School Name:");

        jtxtSchoolName.setEditable(false);

        jLabel2.setText("Student Name:");

        jLabel3.setText("Gender:");

        jrbtnMale.setText("Male");
        jrbtnMale.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbtnMaleItemStateChanged(evt);
            }
        });

        jrbtnFemale.setText("Female");
        jrbtnFemale.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbtnFemaleItemStateChanged(evt);
            }
        });

        jLabel4.setText("Class:");

        jLabel5.setText("Division:");

        jtxtDivision.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtDivisionKeyPressed(evt);
            }
        });

        jLabel6.setText("Phone No.:");

        jtxtPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtPhoneKeyPressed(evt);
            }
        });

        jbtnShow.setText("Show Details");
        jbtnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnShowActionPerformed(evt);
            }
        });

        jLabel7.setText("Order No. :");

        jLabel13.setText("Name:");

        jcmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbClassItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jtxtSchoolName, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jtxtOrderNo, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                        .addGap(48, 48, 48)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrbtnMale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrbtnFemale)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jcmbStudentName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jtxtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtxtDivision, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(49, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbtnShow)
                                .addContainerGap(39, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtxtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtSchoolName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcmbStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnShow))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jrbtnMale)
                                .addComponent(jrbtnFemale))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jtxtDivision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jtxtOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtxtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jtxtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Measurement"));

        jtblShirt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Shirt Length", "Shirt Shoulder", "Shirt Chest", "Shirt Sleeve Length", "Shirt Sleeve Loose", "Shirt Collar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblShirt);

        jLabel9.setText("Shirt");

        jLabel10.setText("Pant/Shorts");

        jtblPant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Pant Length", "Pant Inside", "Pant Bottom Loose", "Pant Knee Length", "Pant Knee Loose", "Pant Waist", "Pant Seat"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtblPant);
        jtblPant.getColumnModel().getColumn(0).setMinWidth(80);
        jtblPant.getColumnModel().getColumn(0).setPreferredWidth(80);
        jtblPant.getColumnModel().getColumn(0).setMaxWidth(80);
        jtblPant.getColumnModel().getColumn(1).setMinWidth(80);
        jtblPant.getColumnModel().getColumn(1).setPreferredWidth(80);
        jtblPant.getColumnModel().getColumn(1).setMaxWidth(80);
        jtblPant.getColumnModel().getColumn(5).setMinWidth(80);
        jtblPant.getColumnModel().getColumn(5).setPreferredWidth(80);
        jtblPant.getColumnModel().getColumn(5).setMaxWidth(80);
        jtblPant.getColumnModel().getColumn(6).setMinWidth(80);
        jtblPant.getColumnModel().getColumn(6).setPreferredWidth(80);
        jtblPant.getColumnModel().getColumn(6).setMaxWidth(80);

        jtblSkirt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Yok", "Pinnafore Length", "Waist", "Shoulder", "Skirt Length"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jtblSkirt);

        jLabel11.setText("Skirt / Pinnafore");

        jLabel12.setText("Coat");

        jtblCoat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Coat Length", "Coat Shoulder", "Coat Chest", "Coat Waist", "Coat Seat"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jtblCoat);

        jbtnSave2.setText("SAVE");
        jbtnSave2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSave2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(155, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnSave2)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbtnSave2))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel18.setText("Item:");

        jLabel19.setText("Quantity:");

        jtxtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtQtyKeyPressed(evt);
            }
        });

        jbtnAdd.setText("Add");
        jbtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddActionPerformed(evt);
            }
        });

        jtblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Item no.", "Item Name", "Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jtblItem);
        jtblItem.getColumnModel().getColumn(0).setMinWidth(0);
        jtblItem.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblItem.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblItem.getColumnModel().getColumn(1).setMinWidth(0);
        jtblItem.getColumnModel().getColumn(1).setPreferredWidth(0);
        jtblItem.getColumnModel().getColumn(1).setMaxWidth(0);
        jtblItem.getColumnModel().getColumn(3).setMinWidth(70);
        jtblItem.getColumnModel().getColumn(3).setPreferredWidth(70);
        jtblItem.getColumnModel().getColumn(3).setMaxWidth(70);

        jbtnSave1.setText("Save");
        jbtnSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSave1ActionPerformed(evt);
            }
        });

        jbtnEdit.setText("Edit");
        jbtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditActionPerformed(evt);
            }
        });

        jbtnDelete1.setText("Delete");
        jbtnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDelete1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtxtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 64, Short.MAX_VALUE)
                        .addComponent(jbtnSave1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnAdd)
                        .addGap(14, 14, 14))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18)
                                .addComponent(jcmbItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jbtnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnDelete1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnEdit)
                    .addComponent(jbtnDelete1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jcmbItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jtxtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnAdd)
                    .addComponent(jbtnSave1))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jbtnDelete2.setBackground(new java.awt.Color(255, 204, 204));
        jbtnDelete2.setText("Delete Student");
        jbtnDelete2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDelete2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnDelete2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 39, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnDelete2)
                        .addGap(27, 27, 27))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtDivisionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtDivisionKeyPressed
        text = "";
        text = jtxtDivision.getText();
        if (text.length() == 3) {
            jtxtDivision.setEditable(false);
            if (evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
                jtxtDivision.setEditable(true);
            }
        } else if (evt.getKeyChar() >= evt.VK_A && evt.getKeyChar() <= evt.VK_Z || evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT || evt.getKeyChar() == evt.VK_PERIOD) {
            jtxtDivision.setEditable(true);
        } else {
            jtxtDivision.setEditable(false);
        }
    }//GEN-LAST:event_jtxtDivisionKeyPressed

    private void jtxtPhoneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtPhoneKeyPressed
        text = "";
        text = jtxtPhone.getText();
        if (text.length() == 11) {
            jtxtPhone.setEditable(false);
            if (evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
                jtxtPhone.setEditable(true);
            }
        } else if (evt.getKeyChar() >= evt.VK_0 && evt.getKeyChar() <= evt.VK_9 || evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT || evt.getKeyChar() == evt.VK_PERIOD) {
            jtxtPhone.setEditable(true);
        } else {
            jtxtPhone.setEditable(false);
        }
    }//GEN-LAST:event_jtxtPhoneKeyPressed

    private void jtxtQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtQtyKeyPressed
        text = "";
        text = jtxtQty.getText();
        if (text.length() == 2) {
            jtxtQty.setEditable(false);
            if (evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
                jtxtQty.setEditable(true);
            }
        } else if (evt.getKeyChar() >= evt.VK_0 && evt.getKeyChar() <= evt.VK_9 || evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT || evt.getKeyChar() == evt.VK_PERIOD) {
            jtxtQty.setEditable(true);
        } else {
            jtxtQty.setEditable(false);
        }
    }//GEN-LAST:event_jtxtQtyKeyPressed

    private void jbtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddActionPerformed
        boolean added = false;
        if (jcmbItemName.getSelectedItem() == null || jcmbItemName.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select an item to proceed", "Message", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtQty.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter quantity to proceed", "Message", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbClass.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter a class", "Message", JOptionPane.INFORMATION_MESSAGE);
        } else if (!jrbtnFemale.isSelected() && !jrbtnMale.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select a gender", "Message", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                if (jrbtnFemale.isSelected()) {
                    gender = "Female";
                } else if (jrbtnMale.isSelected()) {
                    gender = "Male";
                }
                temp = 0;
                added = false;
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt = con.createStatement();
                stmt1 = con.createStatement();
                stmt2 = con.createStatement();
                query = "select set_no from mst_set where set_name = '" + jcmbItemName.getSelectedItem().toString() + "' and flag!='D'";
                rs = stmt.executeQuery(query);
                if (rs.next()) {
                    query = "select a.item_no,c.item_name from mst_school_item_price a join mst_set b on a.set_no = b.set_no join mst_item c on a.item_no = c.item_no where  a.school_no = '" + Global.getSchoolno() + "' and c.gender in ('" + gender + "','Common') and a.class_from <= '" + jcmbClass.getSelectedItem() + "' and a.class_to >= '" + jcmbClass.getSelectedItem() + "' and b.set_name = '" + jcmbItemName.getSelectedItem() + "'  and a.flag!='D' and b.flag!='D' and c.flag!='D'";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        added = false;
                        for (int i = 0; i < jtblItem.getRowCount(); i++) {
                            if (jtblItem.getValueAt(i, 2).equals(rs.getString(2))) {
                                added = true;
                            }
                        }
                        if (!added) {
                            query = "select school_no,class_no,item_no,material_no,fixed_mat_length,actual_mat_length from mst_material_consumption where item_no = '" + rs.getString(1) + "' and school_no = '" + Global.getSchoolno() + "' and class_no = '" + classno + "' and flag!='D'";
                            rs1 = stmt1.executeQuery(query);
                            while (rs1.next()) {
                                query = "INSERT INTO MST_STUDENT_MAT_DETAIL(STSL_NO,ITEM_NO,MATERIAL_NO,FIXED_MAT_LENGTH,ACTUAL_MAT_LENGTH,FLAG,DATE_CREATED) VALUES ('" + stsl + "', '" + rs1.getString(3) + "', '" + rs1.getString(4) + "', '" + rs1.getString(5) + "', '" + rs1.getString(6) + "', 'I', '" + today + "')";
                                temp = temp + stmt2.executeUpdate(query);
                            }
                            query = "insert into mst_student_detail(STSL_NO ,ITEM_NO,QTY ,FLAG,DATE_CREATED) values(" + stsl + "," + rs.getString(1) + "," + jtxtQty.getText().trim() + ",'I','" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "')";
                            temp = temp + stmt1.executeUpdate(query);
                        }
                    }
                    if (temp > 0) {
                        con.commit();
                        JOptionPane.showMessageDialog(this, "Update successfull!", "Info", JOptionPane.INFORMATION_MESSAGE);
                        populateitemtable();
                        jcmbItemName.setSelectedItem("");
                        jtxtQty.setText("");
                    }
                } else {
                    for (int i = 0; i < jtblItem.getRowCount(); i++) {
                        if (jtblItem.getValueAt(i, 2).equals(jcmbItemName.getSelectedItem().toString())) {
                            added = true;
                        }
                    }
                    if (added == true) {
                        JOptionPane.showMessageDialog(this, "This item already exist", "Message", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        model1.addRow(new Object[]{});
                        query = "select item_no from mst_item where item_name = '" + jcmbItemName.getSelectedItem().toString() + "' and flag!='D' and year(date_created)='" + Global.year + "'";
                        rs = stmt.executeQuery(query);
                        if (rs.next()) {
                            query = "select school_no,class_no,item_no,material_no,fixed_mat_length,actual_mat_length from mst_material_consumption where item_no = '" + rs.getString(1) + "' and school_no = '" + Global.getSchoolno() + "' and class_no = '" + classno + "'";
                            rs1 = stmt1.executeQuery(query);
                            while (rs1.next()) {
                                query = "INSERT INTO MST_STUDENT_MAT_DETAIL(STSL_NO,ITEM_NO,MATERIAL_NO,FIXED_MAT_LENGTH,ACTUAL_MAT_LENGTH,FLAG,DATE_CREATED) VALUES ('" + stsl + "', '" + rs1.getString(3) + "', '" + rs1.getString(4) + "', '" + rs1.getString(5) + "', '" + rs1.getString(6) + "', 'I', '" + today + "')";
                                temp = temp + stmt2.executeUpdate(query);
                            }
                            query = "insert into mst_student_detail(STSL_NO ,ITEM_NO,QTY ,FLAG,DATE_CREATED) values(" + stsl + "," + rs.getString(1) + "," + jtxtQty.getText().trim() + ",'I','" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "')";
                            temp = stmt.executeUpdate(query);
                        }
                        if (temp > 0) {
                            con.commit();
                            JOptionPane.showMessageDialog(this, "Update successfull!", "Info", JOptionPane.INFORMATION_MESSAGE);
                            populateitemtable();
                            jcmbItemName.setSelectedItem("");
                            jtxtQty.setText("");
                        }
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jbtnAddActionPerformed

    private void jbtnSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSave1ActionPerformed
        if (jcmbItemName.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select an item", "Message", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtQty.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please fill quantity to save", "Message", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt = con.createStatement();
                query = "select set_no from mst_set where set_name = '" + jcmbItemName.getSelectedItem().toString() + "' and flag!='D'";
                rs = stmt.executeQuery(query);
                if (!rs.next()) {
                    query = "update mst_student_detail set qty='" + jtxtQty.getText().trim() + "' where stsl_no = '" + stsl + "' and item_no = '" + item_no + "' and sl_no = '" + slno + "'";
                    int i = stmt.executeUpdate(query);
                    if (i > 0) {
                        con.commit();
                        JOptionPane.showMessageDialog(this, "Update successfull!", "Info", JOptionPane.INFORMATION_MESSAGE);
                        populateitemtable();
                        jcmbItemName.setSelectedItem("");
                        jtxtQty.setText("");
                        jbtnSave1.setVisible(false);
                        jbtnAdd.setVisible(true);
                        jcmbItemName.setEnabled(true);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please select an item, you have selected a set!", "Message", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }

    }//GEN-LAST:event_jbtnSave1ActionPerformed

    private void jbtnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnShowActionPerformed

        if (jcmbStudentName.getSelectedItem().equals("")) {
            clear();
        } else {
            try {
                order_no = jcmbStudentName.getSelectedItem().toString().split("   ");
                query = "select STSL_NO,SCHOOL_NO, ORDER_NO, STUDENT_NAME, CLASS_NO, DIVISION, GENDER,PHONE_N0,SHIRTH_LENGTH, SHIRTH_SHOULDER, SHIRTH_CHEST,SHIRTH_SLEEVE_LENGTH,"
                        + " SHIRTH_SLEEVE_LOOSE, SHIRTH_COLLAR, PANT_LENGTH, PANT_INSIDE, PANT_KNEE_LENGHT, PANT_KNEE_LOOSE, PANT_WAIST, PANT_SEAT,PANT_BOTTOM_LOOSE,PIN_YOK,PIN_LENGTH,PIN_WAIST,PIN_SHOULDER,SKIRT_LENGTH,"
                        + " COAT_LENGTH, COAT_SHOULDER, COAT_CHEST, COAT_WAIST, COAT_SEAT from mst_student where order_no = '" + order_no[0] + "' and school_no = '" + Global.getSchoolno() + "' and flag!='D'";
                con = new DBConnection().connect();
                stmt = con.createStatement();
                rs = stmt.executeQuery(query);
                if (rs.next()) {
                    stsl = rs.getInt(1);
                    if (rs.getString("Gender").equals("Male")) {
                        jrbtnMale.setSelected(true);
                    } else {
                        jrbtnFemale.setSelected(true);
                    }
                    jtxtStudentName.setText(rs.getString(4));
                    jtxtOrderNo.setText(rs.getString(3));
                    jtxtDivision.setText(rs.getString("division"));
                    jtxtPhone.setText(rs.getString(8));
                    jtblShirt.setValueAt(rs.getDouble(9), 0, 0);
                    jtblShirt.setValueAt(rs.getDouble(10), 0, 1);
                    jtblShirt.setValueAt(rs.getDouble(11), 0, 2);
                    jtblShirt.setValueAt(rs.getDouble(12), 0, 3);
                    jtblShirt.setValueAt(rs.getDouble(13), 0, 4);
                    jtblShirt.setValueAt(rs.getDouble(14), 0, 5);
                    jtblPant.setValueAt(rs.getDouble(15), 0, 0);
                    jtblPant.setValueAt(rs.getDouble(16), 0, 1);
                    jtblPant.setValueAt(rs.getDouble(17), 0, 6);
                    jtblPant.setValueAt(rs.getDouble(18), 0, 2);
                    jtblPant.setValueAt(rs.getDouble(19), 0, 3);
                    jtblPant.setValueAt(rs.getDouble(20), 0, 4);
                    jtblPant.setValueAt(rs.getDouble(21), 0, 5);
                    jtblSkirt.setValueAt(rs.getDouble(22), 0, 0);
                    jtblSkirt.setValueAt(rs.getDouble(23), 0, 1);
                    jtblSkirt.setValueAt(rs.getDouble(24), 0, 2);
                    jtblSkirt.setValueAt(rs.getDouble(25), 0, 3);
                    jtblSkirt.setValueAt(rs.getDouble(26), 0, 4);
                    jtblCoat.setValueAt(rs.getDouble(27), 0, 0);
                    jtblCoat.setValueAt(rs.getDouble(28), 0, 1);
                    jtblCoat.setValueAt(rs.getDouble(29), 0, 2);
                    jtblCoat.setValueAt(rs.getDouble(30), 0, 3);
                    jtblCoat.setValueAt(rs.getDouble(31), 0, 4);
                    classno = rs.getInt("class_no");
                    query = "select class from mst_class where class_no = '" + rs.getString("class_no") + "' and flag!='D'";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        jcmbClass.setSelectedItem(rs.getString("class"));
                    }
                    populateitemtable();
                    jcmbItemName.setSelectedItem("");
                    jtxtQty.setText("");
                    jbtnSave1.setVisible(false);
                    jbtnAdd.setVisible(true);
                    jcmbItemName.setEnabled(true);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            }
        }

    }//GEN-LAST:event_jbtnShowActionPerformed
    private void jbtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditActionPerformed
        rowcount = jtblItem.getRowCount();
        if (rowcount > 0 && jtblItem.getSelectedRow() != -1) {
            jbtnSave1.setVisible(true);
            jbtnAdd.setVisible(false);
            slno = Integer.parseInt(jtblItem.getValueAt(jtblItem.getSelectedRow(), 0).toString());
            item_no = Integer.parseInt(jtblItem.getValueAt(jtblItem.getSelectedRow(), 1).toString());
            jcmbItemName.setSelectedItem(jtblItem.getValueAt(jtblItem.getSelectedRow(), 2));
            jcmbItemName.setEnabled(false);
            jtxtQty.setText(jtblItem.getValueAt(jtblItem.getSelectedRow(), 3).toString());
        } else {
            JOptionPane.showMessageDialog(this, "Please select an item to edit", "Message", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbtnEditActionPerformed

    private void jbtnSave2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSave2ActionPerformed
        double shirtlength, shirthshoulder, shirtchest, shirtsleevelength, shirtsleeveloose, shirtcolar, pantbottomloose, pantlength, pantinside, pantkneelength, pantkneeloose, pantwaist, pantseat, skirtyok, skirtlength, skirtwaist, skirtshoulder, coatlength, coatshoulder, coatchest, coatwaist, coatseat, pinlength;
        shirtlength = Double.parseDouble(jtblShirt.getValueAt(0, 0).toString());
        shirthshoulder = Double.parseDouble(jtblShirt.getValueAt(0, 1).toString());
        shirtchest = Double.parseDouble(jtblShirt.getValueAt(0, 2).toString());
        shirtsleevelength = Double.parseDouble(jtblShirt.getValueAt(0, 3).toString());
        shirtsleeveloose = Double.parseDouble(jtblShirt.getValueAt(0, 4).toString());
        shirtcolar = Double.parseDouble(jtblShirt.getValueAt(0, 5).toString());
        pantlength = Double.parseDouble(jtblPant.getValueAt(0, 0).toString());
        pantinside = Double.parseDouble(jtblPant.getValueAt(0, 1).toString());
        pantkneelength = Double.parseDouble(jtblPant.getValueAt(0, 3).toString());
        pantkneeloose = Double.parseDouble(jtblPant.getValueAt(0, 4).toString());
        pantwaist = Double.parseDouble(jtblPant.getValueAt(0, 5).toString());
        pantseat = Double.parseDouble(jtblPant.getValueAt(0, 6).toString());
        pantbottomloose = Double.parseDouble(jtblPant.getValueAt(0, 2).toString());
        skirtyok = Double.parseDouble(jtblSkirt.getValueAt(0, 0).toString());
        pinlength = Double.parseDouble(jtblSkirt.getValueAt(0, 1).toString());
        skirtwaist = Double.parseDouble(jtblSkirt.getValueAt(0, 2).toString());
        skirtshoulder = Double.parseDouble(jtblSkirt.getValueAt(0, 3).toString());
        skirtlength = Double.parseDouble(jtblSkirt.getValueAt(0, 4).toString());
        coatlength = Double.parseDouble(jtblCoat.getValueAt(0, 0).toString());
        coatshoulder = Double.parseDouble(jtblCoat.getValueAt(0, 1).toString());
        coatchest = Double.parseDouble(jtblCoat.getValueAt(0, 2).toString());
        coatwaist = Double.parseDouble(jtblCoat.getValueAt(0, 3).toString());
        coatseat = Double.parseDouble(jtblCoat.getValueAt(0, 4).toString());

        if (jtxtOrderNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter the order number", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtStudentName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter the student name", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbClass.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select the class", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtDivision.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter the division", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtPhone.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter the phone", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (!jrbtnFemale.isSelected() && !jrbtnMale.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select a gender", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (shirtsleeveloose > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid shirt sleeve loose", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (shirtcolar > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid shirt collar", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (pantinside > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid pant inside", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (pantkneelength > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid pant knee length", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (pantkneeloose > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid pant knee loose", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (pantlength > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid pant length", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (pantseat > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid pant seat", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (pantwaist > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid pant waist", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (pantbottomloose > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid pant bottom loose", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (skirtlength > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid skirt length", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (skirtwaist > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid skirt waist", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (skirtyok > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid skirt yok", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (skirtshoulder > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid skirt shoulder", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (pinlength > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid pinnafore length", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (coatchest > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid coat chest", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (coatlength > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid coat length", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (coatseat > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid coat seat", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (coatshoulder > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid coat shoulder", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else if (coatwaist > 1000) {
            JOptionPane.showMessageDialog(this, "Please enter a valid coat waist", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                int orderno = 0;
                if (jrbtnMale.isSelected()) {
                    gender = "Male";
                } else {
                    gender = "Female";
                }
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt = con.createStatement();
                query = "select order_no from mst_student where school_no = '" + Global.getSchoolno() + "' and order_no = '" + jtxtOrderNo.getText().trim() + "' and stsl_no!='" + stsl + "' and flag!='D'";
                rs = stmt.executeQuery(query);
                if (!rs.next()) {
                    query = "select class_no from mst_class where class = '" + jcmbClass.getSelectedItem() + "' and flag!='D'";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        classno = rs.getInt(1);
                    }
                    query = "update mst_student set ORDER_NO = '" + jtxtOrderNo.getText().trim() + "',STUDENT_NAME = '" + jtxtStudentName.getText().trim() + "', CLASS_NO ='" + classno + "', DIVISION='" + jtxtDivision.getText().trim() + "',"
                            + "GENDER='" + gender + "', PHONE_N0='" + jtxtPhone.getText().trim() + "', SHIRTH_LENGTH='" + jtblShirt.getValueAt(0, 0) + "', SHIRTH_SHOULDER='" + jtblShirt.getValueAt(0, 1) + "',"
                            + " SHIRTH_CHEST='" + jtblShirt.getValueAt(0, 2) + "',SHIRTH_SLEEVE_LENGTH='" + jtblShirt.getValueAt(0, 3) + "',SHIRTH_SLEEVE_LOOSE='" + jtblShirt.getValueAt(0, 4) + "',SHIRTH_COLLAR='" + jtblShirt.getValueAt(0, 5) + "',"
                            + "PANT_LENGTH='" + jtblPant.getValueAt(0, 0) + "',PANT_INSIDE='" + jtblPant.getValueAt(0, 1) + "',PANT_KNEE_LENGHT='" + jtblPant.getValueAt(0, 3) + "',PANT_KNEE_LOOSE='" + jtblPant.getValueAt(0, 4) + "',PANT_WAIST='" + jtblPant.getValueAt(0, 5) + "',PANT_SEAT='" + jtblPant.getValueAt(0, 6) + "',"
                            + "PANT_BOTTOM_LOOSE = '" + jtblPant.getValueAt(0, 2) + "',PIN_YOK='" + jtblSkirt.getValueAt(0, 0) + "',PIN_LENGTH='" + jtblSkirt.getValueAt(0, 1) + "',PIN_WAIST='" + jtblSkirt.getValueAt(0, 2) + "',PIN_SHOULDER = " + jtblSkirt.getValueAt(0, 3) + ",SKIRT_LENGTH = '" + jtblSkirt.getValueAt(0, 4) + "',"
                            + "COAT_LENGTH='" + jtblCoat.getValueAt(0, 0) + "',COAT_SHOULDER='" + jtblCoat.getValueAt(0, 1) + "',COAT_CHEST='" + jtblCoat.getValueAt(0, 2) + "',COAT_WAIST='" + jtblCoat.getValueAt(0, 3) + "', COAT_SEAT='" + jtblCoat.getValueAt(0, 4) + "',FLAG='I',DATE_CREATED='" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "' where stsl_no ='" + stsl + "'";
                    int i = stmt.executeUpdate(query);
                    if (i > 0) {
                        con.commit();
                        clear();
                        JOptionPane.showMessageDialog(this, "Update successfull!", "Message", JOptionPane.INFORMATION_MESSAGE);
                        query = "select order_no,student_name from mst_student where school_no = '" + Global.getSchoolno() + "' and flag!='D'";
                        rs = stmt.executeQuery(query);
                        jcmbStudentName.removeAllItems();
                        jcmbStudentName.addItem("");
                        while (rs.next()) {
                            jcmbStudentName.addItem(rs.getString(1) + "   " + rs.getString(2));
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "This order number exists for another student, please enter a different one", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jbtnSave2ActionPerformed

    private void jbtnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDelete1ActionPerformed
        if (jtblItem.getRowCount() > 0) {
            if (jtblItem.getSelectedRow() >= 0) {
                int b = JOptionPane.showConfirmDialog(this, "Do you want to delete this item?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (b == JOptionPane.YES_OPTION) {
                    try {
                        con = new DBConnection().connect();
                        stmt = con.createStatement();
                        query = "update mst_student_detail set flag='D' where sl_no = '" + jtblItem.getValueAt(jtblItem.getSelectedRow(), 0) + "' ";
                        int i = stmt.executeUpdate(query);
                        if (i > 0) {
                            JOptionPane.showMessageDialog(this, "Update Successfull!", "Info", JOptionPane.INFORMATION_MESSAGE);
                            populateitemtable();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    } finally {
                        try {
                            if (!rs.isClosed()) {
                                rs.close();
                            }
                            if (!con.isClosed()) {
                                con.close();
                            }
                            if (!stmt.isClosed()) {
                                stmt.isClosed();
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select an item to delete!", "Info", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an order number to continue!", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbtnDelete1ActionPerformed

    private void jbtnDelete2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDelete2ActionPerformed
        if (jcmbStudentName.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a student to delete?", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int b = JOptionPane.showConfirmDialog(this, "Do you want delete the selected student?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (b == JOptionPane.YES_OPTION) {
                try {
                    int i = 0;
                    con = new DBConnection().connect();
                    con.setAutoCommit(false);
                    stmt = con.createStatement();
                    query = "update mst_student set FLAG = 'D',DATE_UPDATED = '" + today + "' where STSL_NO = '" + stsl + "'";
                    i = stmt.executeUpdate(query);
                    if (i > 0) {
                        con.commit();
                        JOptionPane.showMessageDialog(this, "Deleted Successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
                        clear();
                        query = "select order_no,student_name from mst_student where school_no = '" + Global.getSchoolno() + "' and flag!='D'";
                        rs = stmt.executeQuery(query);
                        jcmbStudentName.removeAllItems();
                        jcmbStudentName.addItem("");
                        while (rs.next()) {
                            jcmbStudentName.addItem(rs.getString(1) + "   " + rs.getString(2));
                        }
                        jcmbStudentName.grabFocus();
                        jcmbStudentName.setSelectedItem("");
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } finally {
                    try {
                        if (!rs.isClosed()) {
                            rs.close();
                        }
                        if (!con.isClosed()) {
                            con.close();
                        }
                        if (!stmt.isClosed()) {
                            stmt.isClosed();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jbtnDelete2ActionPerformed

    private void jrbtnMaleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbtnMaleItemStateChanged
        jtblSkirt.setEnabled(false);
        if (!jcmbClass.getSelectedItem().equals("")) {
            populateItem("Male", jcmbClass.getSelectedItem().toString());
        }
    }//GEN-LAST:event_jrbtnMaleItemStateChanged

    private void jrbtnFemaleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbtnFemaleItemStateChanged
        jtblSkirt.setEnabled(true);
        if (!jcmbClass.getSelectedItem().equals("")) {
            populateItem("Female", jcmbClass.getSelectedItem().toString());
        }
    }//GEN-LAST:event_jrbtnFemaleItemStateChanged

    private void jcmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbClassItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (!jcmbClass.getSelectedItem().equals("")) {
                if (jrbtnMale.isSelected()) {
                    populateItem("Male", jcmbClass.getSelectedItem().toString());
                } else if (jrbtnFemale.isSelected()) {
                    populateItem("Female", jcmbClass.getSelectedItem().toString());
                }
            }
        }
    }//GEN-LAST:event_jcmbClassItemStateChanged
    public void clear() {
        jtxtStudentName.setText("");
        jcmbStudentName.setSelectedItem("");
        jtxtOrderNo.setText("");
        jcmbClass.setSelectedItem("");
        jtxtDivision.setText("");
        jtxtPhone.setText("");
        jcmbItemName.setSelectedItem("");
        jtxtQty.setText("");
        for (int i = 0; i < 6; i++) {
            jtblShirt.setValueAt(null, 0, i);
        }
        for (int i = 0; i < 7; i++) {
            jtblPant.setValueAt(null, 0, i);
        }
        for (int i = 0; i < 5; i++) {
            jtblSkirt.setValueAt(null, 0, i);
        }
        for (int i = 0; i < 5; i++) {
            jtblCoat.setValueAt(null, 0, i);
        }
        rowcount = jtblItem.getRowCount();
        for (int i = 0; i < rowcount; i++) {
            model1.removeRow(0);
        }
    }

    private void populateitemtable() {
        try {
            rowcount = jtblItem.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model1.removeRow(0);
            }
            con = new DBConnection().connect();
            stmt = con.createStatement();
            query = "select a.sl_no,a.item_no,b.item_name,a.qty from mst_student_detail a left join mst_item b on a.item_no = b.item_no where a.stsl_no = '" + stsl + "' and a.flag!='D' and b.flag!='D'";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                model1.addRow(new Object[]{});
                jtblItem.setValueAt(rs.getString(1), jtblItem.getRowCount() - 1, 0);
                jtblItem.setValueAt(rs.getString(2), jtblItem.getRowCount() - 1, 1);
                jtblItem.setValueAt(rs.getString(3), jtblItem.getRowCount() - 1, 2);
                jtblItem.setValueAt(rs.getString(4), jtblItem.getRowCount() - 1, 3);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jbtnAdd;
    private javax.swing.JButton jbtnDelete1;
    private javax.swing.JButton jbtnDelete2;
    private javax.swing.JButton jbtnEdit;
    private javax.swing.JButton jbtnSave1;
    private javax.swing.JButton jbtnSave2;
    private javax.swing.JButton jbtnShow;
    private javax.swing.JComboBox jcmbClass;
    private javax.swing.JComboBox jcmbItemName;
    private javax.swing.JComboBox jcmbStudentName;
    private javax.swing.JRadioButton jrbtnFemale;
    private javax.swing.JRadioButton jrbtnMale;
    private javax.swing.JTable jtblCoat;
    private javax.swing.JTable jtblItem;
    private javax.swing.JTable jtblPant;
    private javax.swing.JTable jtblShirt;
    private javax.swing.JTable jtblSkirt;
    private javax.swing.JTextField jtxtDivision;
    private javax.swing.JTextField jtxtOrderNo;
    private javax.swing.JTextField jtxtPhone;
    private javax.swing.JTextField jtxtQty;
    private javax.swing.JTextField jtxtSchoolName;
    private javax.swing.JTextField jtxtStudentName;
    // End of variables declaration//GEN-END:variables
}
