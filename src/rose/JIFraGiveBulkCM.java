/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rose;

import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joel
 */
public class JIFraGiveBulkCM extends javax.swing.JInternalFrame {

    DefaultTableModel model1;
    DefaultTableModel model2;
    Connection con = null;
    ResultSet rs = null;
    ResultSet rs1 = null;
    ResultSet rs2 = null;
    Statement stmt = null;
    Statement stmt1 = null;
    Statement stmt2 = null;
    String query = null, stsl = null;
    String[] groupno, item_no;
    int rowcount = 0, temp = 0, itemno = 0;
    int[] selected;
    String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
     

    public JIFraGiveBulkCM() {
        initComponents();
        try {
            model1 = (DefaultTableModel) jtblStudentDetail.getModel();
            model2 = (DefaultTableModel) jtblCuttingMaster.getModel();
            con = new DBConnection().connect();
            stmt = con.createStatement();
            jcmbClass.addItem("");
            query = "select class from mst_class where flag!='D'";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                jcmbClass.addItem(rs.getString(1));
            }
            query = "select group_no,cutting_master from mst_group where flag!='D' and year(date_created)='" + Global.year + "'";
            rs = stmt.executeQuery(query);
            jcmbCuttingMaster.addItem("");
            while (rs.next()) {
                jcmbCuttingMaster.addItem(rs.getString(1) + "   " + rs.getString(2));
            }
            jcmbGender.addItem("");
            jcmbGender.addItem("Male");
            jcmbGender.addItem("Female");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcmbClass = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jcmbGender = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jcmbItem = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblStudentDetail = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblCuttingMaster = new javax.swing.JTable();
        jcmbCuttingMaster = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jdteDate = new com.toedter.calendar.JDateChooser();
        jbtnView = new javax.swing.JButton();
        jbtnGive = new javax.swing.JButton();

        setClosable(true);
        setTitle("Bulk - Give CM");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Class");

        jcmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbClassItemStateChanged(evt);
            }
        });

        jLabel2.setText("Gender");

        jcmbGender.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbGenderItemStateChanged(evt);
            }
        });

        jLabel3.setText("Item");

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jtblStudentDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Order No.", "Name", "Class", "Item", "Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblStudentDetail);
        jtblStudentDetail.getColumnModel().getColumn(0).setMinWidth(0);
        jtblStudentDetail.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblStudentDetail.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblStudentDetail.getColumnModel().getColumn(1).setPreferredWidth(70);
        jtblStudentDetail.getColumnModel().getColumn(3).setPreferredWidth(70);
        jtblStudentDetail.getColumnModel().getColumn(5).setPreferredWidth(55);

        jtblCuttingMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Order No.", "Student Name", "Cutting Master", "Item", "Quantity", "Date Given", "Date Recieved", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtblCuttingMaster);
        jtblCuttingMaster.getColumnModel().getColumn(0).setMinWidth(0);
        jtblCuttingMaster.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblCuttingMaster.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblCuttingMaster.getColumnModel().getColumn(1).setPreferredWidth(70);
        jtblCuttingMaster.getColumnModel().getColumn(5).setPreferredWidth(55);
        jtblCuttingMaster.getColumnModel().getColumn(6).setPreferredWidth(100);
        jtblCuttingMaster.getColumnModel().getColumn(7).setPreferredWidth(100);
        jtblCuttingMaster.getColumnModel().getColumn(8).setPreferredWidth(50);

        jLabel4.setText("Cutting Master");

        jLabel5.setText("Date");

        jbtnView.setText("View");
        jbtnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnViewActionPerformed(evt);
            }
        });

        jbtnGive.setText("Give");
        jbtnGive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGiveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbItem, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbCuttingMaster, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdteDate, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnView)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnGive)
                        .addGap(0, 285, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jcmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jcmbItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jcmbCuttingMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(jdteDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtnView)
                        .addComponent(jbtnGive)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbClassItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jcmbClass.getSelectedItem() == null || jcmbClass.getSelectedItem().equals("")) {
                try {
                    if (jcmbGender.getSelectedItem() == null || jcmbGender.getSelectedItem().equals("")) {
                        query = "select distinct(a.item_no),b.item_name from mst_school_item_price a join mst_item b on a.item_no = b.item_no where a.school_no = '" + Global.getSchoolno() + "' and a.flag!='D' and b.flag!='D'";
                    } else {
                        query = "select distinct(b.item_no),c.item_name from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where a.school_no = '" + Global.getSchoolno() + "' and c.gender in ('" + jcmbGender.getSelectedItem() + "','Common') and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
                    }
                    con = new DBConnection().connect();
                    stmt = con.createStatement();
                    rs = stmt.executeQuery(query);
                    jcmbItem.removeAllItems();
                    jcmbItem.addItem("");
                    while (rs.next()) {
                        jcmbItem.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                try {
                    if (jcmbGender.getSelectedItem() == null || jcmbGender.getSelectedItem().equals("")) {
                        query = "select distinct(b.item_no),c.item_name from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where d.class = '" + jcmbClass.getSelectedItem() + "' and a.school_no = '" + Global.getSchoolno() + "' and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
                    } else {
                        query = "select distinct(b.item_no),c.item_name from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where d.class = '" + jcmbClass.getSelectedItem() + "'  and a.school_no = '" + Global.getSchoolno() + "' and c.gender in ('" + jcmbGender.getSelectedItem() + "','Common') and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
                    }
                    con = new DBConnection().connect();
                    stmt = con.createStatement();
                    rs = stmt.executeQuery(query);
                    jcmbItem.removeAllItems();
                    jcmbItem.addItem("");
                    while (rs.next()) {
                        jcmbItem.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jcmbClassItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (!jcmbItem.getSelectedItem().equals("")) {
            item_no = jcmbItem.getSelectedItem().toString().split("   ");
        }
        if (!jcmbClass.getSelectedItem().equals("") && !jcmbGender.getSelectedItem().equals("") && !jcmbItem.getSelectedItem().equals("")) {
            query = "select a.stsl_no,a.order_no,a.student_name,d.class,c.item_name,b.qty from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where d.class = '" + jcmbClass.getSelectedItem() + "' and a.school_no = '" + Global.getSchoolno() + "' and a.gender = '" + jcmbGender.getSelectedItem() + "' and b.item_no = '" + item_no[0] + "' and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
        } else if (jcmbClass.getSelectedItem().equals("") && jcmbGender.getSelectedItem().equals("") && jcmbItem.getSelectedItem().equals("")) {
            query = "select a.stsl_no,a.order_no,a.student_name,d.class,c.item_name,b.qty from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where a.school_no = '" + Global.getSchoolno() + "' and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
        } else if (!jcmbClass.getSelectedItem().equals("") && jcmbGender.getSelectedItem().equals("") && jcmbItem.getSelectedItem().equals("")) {
            query = "select a.stsl_no,a.order_no,a.student_name,d.class,c.item_name,b.qty from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where a.school_no = '" + Global.getSchoolno() + "' and d.class = '" + jcmbClass.getSelectedItem() + "'  and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
        } else if (jcmbClass.getSelectedItem().equals("") && !jcmbGender.getSelectedItem().equals("") && jcmbItem.getSelectedItem().equals("")) {
            query = "select a.stsl_no,a.order_no,a.student_name,d.class,c.item_name,b.qty from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where a.school_no = '" + Global.getSchoolno() + "' and a.gender = '" + jcmbGender.getSelectedItem() + "'  and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
        } else if (jcmbClass.getSelectedItem().equals("") && jcmbGender.getSelectedItem().equals("") && !jcmbItem.getSelectedItem().equals("")) {
            query = "select a.stsl_no,a.order_no,a.student_name,d.class,c.item_name,b.qty from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where a.school_no = '" + Global.getSchoolno() + "' and b.item_no = '" + item_no[0] + "'  and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
        } else if (jcmbClass.getSelectedItem().equals("") && !jcmbGender.getSelectedItem().equals("") && !jcmbItem.getSelectedItem().equals("")) {
            query = "select a.stsl_no,a.order_no,a.student_name,d.class,c.item_name,b.qty from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where b.item_no = '" + item_no[0] + "' and a.school_no = '" + Global.getSchoolno() + "' and a.gender = '" + jcmbGender.getSelectedItem() + "'  and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
        } else if (!jcmbClass.getSelectedItem().equals("") && !jcmbGender.getSelectedItem().equals("") && jcmbItem.getSelectedItem().equals("")) {
            query = "select a.stsl_no,a.order_no,a.student_name,d.class,c.item_name,b.qty from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where d.class = '" + jcmbClass.getSelectedItem() + "' and a.school_no = '" + Global.getSchoolno() + "' and a.gender = '" + jcmbGender.getSelectedItem() + "'  and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
        } else if (!jcmbClass.getSelectedItem().equals("") && jcmbGender.getSelectedItem().equals("") && !jcmbItem.getSelectedItem().equals("")) {
            query = "select a.stsl_no,a.order_no,a.student_name,d.class,c.item_name,b.qty from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where d.class = '" + jcmbClass.getSelectedItem() + "' and a.school_no = '" + Global.getSchoolno() + "' and  b.item_no = '" + item_no[0] + "'  and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
        }
        try {
            rowcount = jtblStudentDetail.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model1.removeRow(0);
            }
            con = new DBConnection().connect();
            stmt = con.createStatement();
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                model1.addRow(new Object[]{});
                temp = jtblStudentDetail.getRowCount() - 1;
                jtblStudentDetail.setValueAt(rs.getString(1), temp, 0);
                jtblStudentDetail.setValueAt(rs.getString(2), temp, 1);
                jtblStudentDetail.setValueAt(rs.getString(3), temp, 2);
                jtblStudentDetail.setValueAt(rs.getString(4), temp, 3);
                jtblStudentDetail.setValueAt(rs.getString(5), temp, 4);
                jtblStudentDetail.setValueAt(rs.getString(6), temp, 5);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jcmbGenderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbGenderItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (!jcmbGender.getSelectedItem().equals("")) {
                try {
                    if (!jcmbClass.getSelectedItem().equals("")) {
                        query = "select distinct(b.item_no),c.item_name from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where d.class = '" + jcmbClass.getSelectedItem() + "'  and a.school_no = '" + Global.getSchoolno() + "' and c.gender in ('" + jcmbGender.getSelectedItem() + "','Common') and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
                    } else {
                        query = "select distinct(b.item_no),c.item_name from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where a.school_no = '" + Global.getSchoolno() + "' and c.gender in ('" + jcmbGender.getSelectedItem() + "','Common') and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
                    }
                    con = new DBConnection().connect();
                    stmt = con.createStatement();
                    rs = stmt.executeQuery(query);
                    jcmbItem.removeAllItems();
                    jcmbItem.addItem("");
                    while (rs.next()) {
                        jcmbItem.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else if (jcmbGender.getSelectedItem().equals("")) {
                if (!jcmbClass.getSelectedItem().equals("")) {
                    query = "select distinct(b.item_no),c.item_name from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where d.class = '" + jcmbClass.getSelectedItem() + "'  and a.school_no = '" + Global.getSchoolno() + "' and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
                } else if (jcmbClass.getSelectedItem().equals("")) {
                    query = "select distinct(b.item_no),c.item_name from mst_student a join mst_student_detail b on a.stsl_no = b.stsl_no join mst_item c on b.item_no = c.item_no join mst_class d on a.class_no = d.class_no where a.school_no = '" + Global.getSchoolno() + "' and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D'";
                }
                try {
                    con = new DBConnection().connect();
                    stmt = con.createStatement();
                    rs = stmt.executeQuery(query);
                    jcmbItem.removeAllItems();
                    jcmbItem.addItem("");
                    while (rs.next()) {
                        jcmbItem.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }

    }//GEN-LAST:event_jcmbGenderItemStateChanged
    private void populateCMtable() {
        try {
            con = new DBConnection().connect();
            stmt = con.createStatement();
            groupno = jcmbCuttingMaster.getSelectedItem().toString().split("   ");
            rowcount = jtblCuttingMaster.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model2.removeRow(0);
            }
            if (jdteDate.getDate() == null) {
                query = "select a.sl_no,b.order_no,b.student_name,c.cutting_master,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_cm a,mst_student b,mst_group c,mst_item d where a.group_no = c.group_no and a.stsl_no = b.stsl_no and b.school_no = '" + Global.getSchoolno() + "' and d.item_no = a.item_no and a.status = 'P' and a.flag != 'D' and b.flag != 'D' and c.flag != 'D' and d.flag != 'D' and a.group_no = '" + groupno[0] + "' ";
                System.out.println(query);
            } else {
                query = "select a.sl_no,b.order_no,b.student_name,c.cutting_master,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_cm a,mst_student b,mst_group c,mst_item d where a.group_no = c.group_no and a.stsl_no = b.stsl_no and b.school_no = '" + Global.getSchoolno() + "' and a.date_given = '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate.getDate()) + "' and d.item_no = a.item_no and a.status = 'P' and a.flag != 'D' and b.flag != 'D' and c.flag != 'D' and d.flag != 'D' and a.group_no = '" + groupno[0] + "' ";
            }
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                model2.addRow(new Object[]{});
                jtblCuttingMaster.setValueAt(rs.getString(1), jtblCuttingMaster.getRowCount() - 1, 0);
                jtblCuttingMaster.setValueAt(rs.getString(2), jtblCuttingMaster.getRowCount() - 1, 1);
                jtblCuttingMaster.setValueAt(rs.getString(3), jtblCuttingMaster.getRowCount() - 1, 2);
                jtblCuttingMaster.setValueAt(rs.getString(4), jtblCuttingMaster.getRowCount() - 1, 3);
                jtblCuttingMaster.setValueAt(rs.getString(5), jtblCuttingMaster.getRowCount() - 1, 4);
                jtblCuttingMaster.setValueAt(rs.getString(6), jtblCuttingMaster.getRowCount() - 1, 5);
                jtblCuttingMaster.setValueAt(rs.getString(7), jtblCuttingMaster.getRowCount() - 1, 6);
                jtblCuttingMaster.setValueAt(rs.getString(8), jtblCuttingMaster.getRowCount() - 1, 7);
                jtblCuttingMaster.setValueAt(rs.getString(9), jtblCuttingMaster.getRowCount() - 1, 8);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }
    private void jbtnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnViewActionPerformed
        if (jcmbCuttingMaster.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a buttonhole master", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            populateCMtable();
        }
    }//GEN-LAST:event_jbtnViewActionPerformed

    private void jbtnGiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGiveActionPerformed
        if (jcmbCuttingMaster.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a cutting master", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jdteDate.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please select a date", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblStudentDetail.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Please select a record from table to insert", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                groupno = jcmbCuttingMaster.getSelectedItem().toString().split("   ");
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt1 = con.createStatement();
                stmt = con.createStatement();
                stmt2 = con.createStatement();
                int i = 0;
                temp = 0;
                selected = jtblStudentDetail.getSelectedRows();
                for (int j = 0; j < selected.length; j++) {
                    stsl = jtblStudentDetail.getValueAt(selected[j], 0).toString();
                    query = "select item_no from mst_item where item_name = '" + jtblStudentDetail.getValueAt(selected[j], 4) + "' and flag!='D' and year(date_created)='"+Global.year+"'";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        itemno = rs.getInt(1);
                    }
                    query = "select item_no,qty from mst_student_detail where stsl_no = '" + stsl + "' and item_no = '" + itemno + "' and flag!='D' and year(date_created)='"+Global.year+"'";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        if (rs.getInt(2) >= Integer.parseInt(jtblStudentDetail.getValueAt(selected[j], 5).toString())) {
                            query = "select item_no,qty from trn_cm where stsl_no = '" + stsl + "' and item_no ='" + itemno + "' and flag!='D' and year(date_created)='"+Global.year+"' group by item_no";
                            rs1 = stmt1.executeQuery(query);
                            if (rs1.next()) {
                                temp = rs.getInt(2) - rs1.getInt(2);
                                if (temp > 0) {
                                    if (temp >= Integer.parseInt(jtblStudentDetail.getValueAt(selected[j], 5).toString())) {
                                        query = "select sl_no,qty from trn_cm where stsl_no ='" + stsl + "' and item_no = '" + rs.getString(1) + "' and date_given = '" + today + "' and group_no = '" + groupno[0] + "' and status='P' and flag!='D' and year(date_created)='"+Global.year+"'";
                                        rs2 = stmt2.executeQuery(query);
                                        if (rs2.next()) {
                                            temp = Integer.parseInt(jtblStudentDetail.getValueAt(selected[j], 5).toString()) + rs2.getInt(2);
                                            query = "update trn_cm set qty = '" + temp + "' where sl_no='" + rs2.getString(1) + "'";
                                            i = i + stmt2.executeUpdate(query);
                                        } else {
                                            query = "insert into trn_cm(group_no,stsl_no,item_no,qty,status,date_given,flag,date_created) values('" + groupno[0] + "','" + stsl + "','" + itemno + "','" + jtblStudentDetail.getValueAt(selected[j], 5).toString() + "','P','" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate.getDate()) + "','I','" + today + "')";
                                            i = i + stmt2.executeUpdate(query);
                                        }
                                    }
                                }
                            } else {
                                query = "insert into trn_cm(group_no,stsl_no,item_no,qty,status,date_given,flag,date_created) values('" + groupno[0] + "','" + stsl + "','" + itemno + "','" + jtblStudentDetail.getValueAt(selected[j], 5).toString() + "','P','" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate.getDate()) + "','I','" + today + "')";
                                i = i + stmt1.executeUpdate(query);
                            }
                        }
                    }
                }
                if (i > 0) {
                    con.commit();
                    JOptionPane.showMessageDialog(this, "Inserted Successfull!", "Info", JOptionPane.INFORMATION_MESSAGE);
                    populateCMtable();
                    jdteDate.setDate(null);
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!rs1.isClosed()) {
                        rs1.close();
                    }
                    if (!rs2.isClosed()) {
                        rs2.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                    if (!stmt1.isClosed()) {
                        stmt1.isClosed();
                    }
                    if (!stmt2.isClosed()) {
                        stmt2.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jbtnGiveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnGive;
    private javax.swing.JButton jbtnView;
    private javax.swing.JComboBox jcmbClass;
    private javax.swing.JComboBox jcmbCuttingMaster;
    private javax.swing.JComboBox jcmbGender;
    private javax.swing.JComboBox jcmbItem;
    private com.toedter.calendar.JDateChooser jdteDate;
    private javax.swing.JTable jtblCuttingMaster;
    private javax.swing.JTable jtblStudentDetail;
    // End of variables declaration//GEN-END:variables
}
