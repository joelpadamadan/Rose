/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rose;

import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joel
 */
public class JIFraViewDailyLabourWage extends javax.swing.JInternalFrame {

    DefaultTableModel model;
    DefaultTableModel model1;
    Connection con = null;
    ResultSet rs = null;
    Statement stmt = null;
    String query;
    String[] LabourerNo;
    Double total, advance, gt;
    int rowcount;
     

    public JIFraViewDailyLabourWage() {
        initComponents();
        jcmbSection.addItem("Cutting");
        jcmbSection.addItem("Stitching");
        jcmbSection.addItem("Buttonhole");
        jcmbSection.addItem("Ironing");
        jdteFromDate.setDate(new Date());
        jdteToDate.setDate(new Date());
        model = (DefaultTableModel) jtblLabourer.getModel();
        model1 = (DefaultTableModel) jtblWage.getModel();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcmbSection = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jcmbLabourer = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jdteFromDate = new com.toedter.calendar.JDateChooser();
        jbtnShow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblLabourer = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jtxtGrandTotal = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jdteToDate = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtxtTotal = new javax.swing.JTextField();
        jtxtAdvance = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblWage = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("Daily Labourer Wages");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Section");

        jcmbSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbSectionItemStateChanged(evt);
            }
        });

        jLabel2.setText("Labourer");

        jLabel3.setText("From Date");

        jbtnShow.setText("Show Details");
        jbtnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnShowActionPerformed(evt);
            }
        });

        jtblLabourer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Qty", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblLabourer);
        jtblLabourer.getColumnModel().getColumn(1).setMinWidth(75);
        jtblLabourer.getColumnModel().getColumn(1).setPreferredWidth(75);
        jtblLabourer.getColumnModel().getColumn(1).setMaxWidth(75);
        jtblLabourer.getColumnModel().getColumn(2).setMinWidth(75);
        jtblLabourer.getColumnModel().getColumn(2).setPreferredWidth(75);
        jtblLabourer.getColumnModel().getColumn(2).setMaxWidth(75);

        jLabel4.setText("GRAND TOTAL");

        jtxtGrandTotal.setEditable(false);

        jLabel5.setText("To Date");

        jLabel6.setText("Total");

        jLabel7.setText("Advance");

        jtxtTotal.setEditable(false);
        jtxtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtTotalActionPerformed(evt);
            }
        });

        jtxtAdvance.setEditable(false);
        jtxtAdvance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtAdvanceActionPerformed(evt);
            }
        });

        jtblWage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Date", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtblWage);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbLabourer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jdteFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jdteToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jbtnShow))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtxtGrandTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                    .addComponent(jtxtAdvance)
                                    .addComponent(jtxtTotal)))))
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jcmbLabourer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3)
                        .addComponent(jdteFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbtnShow)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5)
                        .addComponent(jdteToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jtxtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jtxtAdvance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtxtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbSectionItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            try {
                con = new DBConnection().connect();
                stmt = con.createStatement();
                if (jcmbSection.getSelectedItem().equals("Cutting")) {
                    query = "select group_no,cutting_master from mst_group where flag!='D' and year(date_created)='" + Global.year + "'";
                    rs = stmt.executeQuery(query);
                    jcmbLabourer.removeAllItems();
                    jcmbLabourer.addItem("");
                    while (rs.next()) {
                        jcmbLabourer.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }

                } else if (jcmbSection.getSelectedItem().equals("Stitching")) {
                    query = "select tailor_no,tailor_name from mst_tailor where flag!='D' and year(date_created)='" + Global.year + "'";
                    rs = stmt.executeQuery(query);
                    jcmbLabourer.removeAllItems();
                    jcmbLabourer.addItem("");
                    while (rs.next()) {
                        jcmbLabourer.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                } else if (jcmbSection.getSelectedItem().equals("Buttonhole")) {
                    query = "select bh_no,bh_master_name from mst_buttonhole where flag!='D' and year(date_created)='" + Global.year + "'";
                    rs = stmt.executeQuery(query);
                    jcmbLabourer.removeAllItems();
                    jcmbLabourer.addItem("");
                    while (rs.next()) {
                        jcmbLabourer.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                } else if (jcmbSection.getSelectedItem().equals("Ironing")) {
                    query = "select iron_no,iron_name from mst_ironing where flag!='D' and year(date_created)='" + Global.year + "'";
                    rs = stmt.executeQuery(query);
                    jcmbLabourer.removeAllItems();
                    jcmbLabourer.addItem("");
                    while (rs.next()) {
                        jcmbLabourer.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }

        }
    }//GEN-LAST:event_jcmbSectionItemStateChanged

    private void jbtnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnShowActionPerformed
        if (jcmbLabourer.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a labourer", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jdteFromDate.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please select a date", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                rowcount = jtblLabourer.getRowCount();
                for (int i = 0; i < rowcount; i++) {
                    model.removeRow(0);
                }
                rowcount = jtblWage.getRowCount();
                for (int i = 0; i < rowcount; i++) {
                    model1.removeRow(0);
                }
                con = new DBConnection().connect();
                stmt = con.createStatement();
                total = 0.0;
                gt = 0.0;
                advance = 0.0;
                LabourerNo = jcmbLabourer.getSelectedItem().toString().split("   ");
                if (jcmbSection.getSelectedItem().equals("Stitching")) {
                    query = "select b.item_name,sum(a.qty),sum(a.qty)*c.stitching_charge from trn_stitching a join mst_item b on a.item_no = b.item_no left join mst_item_detail c on a.item_no = c.item_no where tailor_no = '" + LabourerNo[0] + "' and date_recieved between '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteFromDate.getDate()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteToDate.getDate()) + "' and a.status = 'C' and a.flag!='D' and b.flag!='D' and c.flag!='D' group by a.item_no;";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        model.addRow(new Object[]{""});
                        jtblLabourer.setValueAt(rs.getString(1), jtblLabourer.getRowCount() - 1, 0);
                        jtblLabourer.setValueAt(rs.getString(2), jtblLabourer.getRowCount() - 1, 1);
                        jtblLabourer.setValueAt(rs.getString(3), jtblLabourer.getRowCount() - 1, 2);
                    }
                    query = "select a.description,a.date_given,a.amount from mst_wage a join mst_tailor b on a.labour_no = b.tailor_no  where a.labour_type= 'Stitching' and b.tailor_no = '" + LabourerNo[0] + "' and a.date_given between '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteFromDate.getDate()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteToDate.getDate()) + "' and a.flag!='D' and b.flag!='D'";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        model1.addRow(new Object[]{""});
                        jtblWage.setValueAt(rs.getString(1), jtblWage.getRowCount() - 1, 0);
                        jtblWage.setValueAt(rs.getString(2), jtblWage.getRowCount() - 1, 1);
                        jtblWage.setValueAt(rs.getString(3), jtblWage.getRowCount() - 1, 2);
                    }
                    query = "select amount from mst_wage_advance where labour_type = 'Stitching' and labour_no = '" + LabourerNo[0] + "' and date_given between '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteFromDate.getDate()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteToDate.getDate()) + "' and flag!='D'";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        advance = advance + rs.getDouble(1);
                    }
                    for (int i = 0; i < jtblLabourer.getRowCount(); i++) {
                        total = total + Double.parseDouble(jtblLabourer.getValueAt(i, 2).toString());
                    }
                    for (int j = 0; j < jtblWage.getRowCount(); j++) {
                        total = total + Double.parseDouble(jtblWage.getValueAt(j, 2).toString());
                    }
                    jtxtTotal.setText(total.toString());
                    jtxtAdvance.setText(advance.toString());
                    jtxtGrandTotal.setText("" + (total - advance));
                    //jtxtTotal.setText(String.valueOf(total));
                } else if (jcmbSection.getSelectedItem().equals("Cutting")) {
                    query = "select b.item_name,sum(a.qty),sum(qty)*c.cutting_charge from trn_cm a join mst_item b on a.item_no = b.item_no left join mst_item_detail c on a.item_no = c.item_no where group_no = '" + LabourerNo[0] + "' and date_recieved between '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteFromDate.getDate()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteToDate.getDate()) + "' and a.status = 'C' and a.flag!='D' and b.flag!='D' and c.flag!='D' group by a.item_no";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        model.addRow(new Object[]{""});
                        jtblLabourer.setValueAt(rs.getString(1), jtblLabourer.getRowCount() - 1, 0);
                        jtblLabourer.setValueAt(rs.getString(2), jtblLabourer.getRowCount() - 1, 1);
                        jtblLabourer.setValueAt(rs.getString(3), jtblLabourer.getRowCount() - 1, 2);
                    }
                    query = "select a.description,a.date_given,a.amount from mst_wage a join mst_group b on a.labour_no = b.group_no  where a.labour_type= 'Cutting' and b.group_no = '" + LabourerNo[0] + "' and a.date_given between '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteFromDate.getDate()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteToDate.getDate()) + "' and a.flag!='D' and b.flag!='D'";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        model1.addRow(new Object[]{""});
                        jtblWage.setValueAt(rs.getString(1), jtblWage.getRowCount() - 1, 0);
                        jtblWage.setValueAt(rs.getString(2), jtblWage.getRowCount() - 1, 1);
                        jtblWage.setValueAt(rs.getString(3), jtblWage.getRowCount() - 1, 2);
                    }
                    query = "select amount from mst_wage_advance where labour_type = 'Cutting' and labour_no = '" + LabourerNo[0] + "' and date_given between '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteFromDate.getDate()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteToDate.getDate()) + "' and flag!='D'";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        advance = advance + rs.getDouble(1);
                    }
                    for (int i = 0; i < jtblLabourer.getRowCount(); i++) {
                        total = total + Double.parseDouble(jtblLabourer.getValueAt(i, 2).toString());
                    }
                    for (int j = 0; j < jtblWage.getRowCount(); j++) {
                        total = total + Double.parseDouble(jtblWage.getValueAt(j, 2).toString());
                    }
                    jtxtTotal.setText(total.toString());
                    jtxtAdvance.setText(advance.toString());
                    jtxtGrandTotal.setText("" + (total - advance));
                } else if (jcmbSection.getSelectedItem().equals("Buttonhole")) {
                    query = "select b.item_name,sum(a.qty),sum(qty)*c.button_charge from trn_buttonhole a join mst_item b on a.item_no = b.item_no left join mst_item_detail c on a.item_no = c.item_no where bh_no = '" + LabourerNo[0] + "' and date_recieved between '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteFromDate.getDate()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteToDate.getDate()) + "' and a.status = 'C' and a.flag!='D' and b.flag!='D' and c.flag!='D' group by a.item_no";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        model.addRow(new Object[]{""});
                        jtblLabourer.setValueAt(rs.getString(1), jtblLabourer.getRowCount() - 1, 0);
                        jtblLabourer.setValueAt(rs.getString(2), jtblLabourer.getRowCount() - 1, 1);
                        jtblLabourer.setValueAt(rs.getString(3), jtblLabourer.getRowCount() - 1, 2);
                    }
                    for (int i = 0; i < jtblLabourer.getRowCount(); i++) {
                        total = total + Double.parseDouble(jtblLabourer.getValueAt(i, 2).toString());
                    }
                    jtxtTotal.setText(total.toString());
                    jtxtAdvance.setText(advance.toString());
                    jtxtGrandTotal.setText("" + (total - advance));
                } else if (jcmbSection.getSelectedItem().equals("Ironing")) {
                    query = "select b.item_name,sum(a.qty),sum(qty)*c.ironing_charge from trn_ironing a join mst_item b on a.item_no = b.item_no left join mst_item_detail c on a.item_no = c.item_no where iron_no = '" + LabourerNo[0] + "' and date_recieved between '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteFromDate.getDate()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteToDate.getDate()) + "' and a.status = 'C' and a.flag!='D' and b.flag!='D' and c.flag!='D' group by a.item_no";
                    rs = stmt.executeQuery(query);
                    while (rs.next()) {
                        model.addRow(new Object[]{""});
                        jtblLabourer.setValueAt(rs.getString(1), jtblLabourer.getRowCount() - 1, 0);
                        jtblLabourer.setValueAt(rs.getString(2), jtblLabourer.getRowCount() - 1, 1);
                        jtblLabourer.setValueAt(rs.getString(3), jtblLabourer.getRowCount() - 1, 2);
                    }
                    for (int i = 0; i < jtblLabourer.getRowCount(); i++) {
                        total = total + Double.parseDouble(jtblLabourer.getValueAt(i, 2).toString());
                    }
                    jtxtTotal.setText(total.toString());
                    jtxtAdvance.setText(advance.toString());
                    jtxtGrandTotal.setText("" + (total - advance));
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_jbtnShowActionPerformed

    private void jtxtAdvanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtAdvanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtAdvanceActionPerformed

    private void jtxtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtTotalActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnShow;
    private javax.swing.JComboBox jcmbLabourer;
    private javax.swing.JComboBox jcmbSection;
    private com.toedter.calendar.JDateChooser jdteFromDate;
    private com.toedter.calendar.JDateChooser jdteToDate;
    private javax.swing.JTable jtblLabourer;
    private javax.swing.JTable jtblWage;
    private javax.swing.JTextField jtxtAdvance;
    private javax.swing.JTextField jtxtGrandTotal;
    private javax.swing.JTextField jtxtTotal;
    // End of variables declaration//GEN-END:variables
}
