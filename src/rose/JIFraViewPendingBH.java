/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rose;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Betsy
 */
public class JIFraViewPendingBH extends javax.swing.JInternalFrame {

    DefaultTableModel model1;
    DefaultTableModel model2;
    Connection con = null;
    ResultSet rs = null;
    Statement stmt = null;
    String query = null;
    String[] bhno;
    int[] selected;
    int rowcount = 0, temp = 0;
    String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
     

    public JIFraViewPendingBH() {
        try {
            initComponents();
            model1 = (DefaultTableModel) jtblButtonholeMaster.getModel();
            model2 = (DefaultTableModel) jtblItem.getModel();
            jtblButtonholeMaster.setAutoCreateRowSorter(true);
            con = new DBConnection().connect();
            stmt = con.createStatement();
            query = "select bh_no,bh_master_name from mst_buttonhole where flag!='D' and year(date_created)='"+Global.year+"'";
            rs = stmt.executeQuery(query);
            jcmbButtonholeMaster.addItem("");
            while (rs.next()) {
                jcmbButtonholeMaster.addItem(rs.getString(1) + "   " + rs.getString(2));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jcmbButtonholeMaster = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblButtonholeMaster = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jcmbStatus = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jdteDate = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblItem = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jdteTakeDate = new com.toedter.calendar.JDateChooser();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Pending List - Buttonhole Master");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setText("Buttonhole Master");

        jcmbButtonholeMaster.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbButtonholeMasterItemStateChanged(evt);
            }
        });

        jtblButtonholeMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Order No.", "Student Name", "Buttonhole Master", "Item", "Quantity", "Date Given", "Date Received", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblButtonholeMaster);
        jtblButtonholeMaster.getColumnModel().getColumn(0).setMinWidth(0);
        jtblButtonholeMaster.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblButtonholeMaster.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblButtonholeMaster.getColumnModel().getColumn(5).setMinWidth(55);
        jtblButtonholeMaster.getColumnModel().getColumn(5).setPreferredWidth(55);
        jtblButtonholeMaster.getColumnModel().getColumn(5).setMaxWidth(55);
        jtblButtonholeMaster.getColumnModel().getColumn(6).setMinWidth(100);
        jtblButtonholeMaster.getColumnModel().getColumn(6).setPreferredWidth(100);
        jtblButtonholeMaster.getColumnModel().getColumn(6).setMaxWidth(100);
        jtblButtonholeMaster.getColumnModel().getColumn(7).setMinWidth(100);
        jtblButtonholeMaster.getColumnModel().getColumn(7).setPreferredWidth(100);
        jtblButtonholeMaster.getColumnModel().getColumn(7).setMaxWidth(100);
        jtblButtonholeMaster.getColumnModel().getColumn(8).setMinWidth(50);
        jtblButtonholeMaster.getColumnModel().getColumn(8).setPreferredWidth(50);
        jtblButtonholeMaster.getColumnModel().getColumn(8).setMaxWidth(50);

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Status");

        jcmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pending", "Completed" }));

        jLabel3.setText("Date");

        jtblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Total No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtblItem);
        jtblItem.getColumnModel().getColumn(1).setPreferredWidth(100);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel5.setText("Date");

        jButton2.setText("Take");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdteTakeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jdteTakeDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbButtonholeMaster, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdteDate, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jcmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jcmbButtonholeMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(jdteDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbButtonholeMasterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbButtonholeMasterItemStateChanged
    }//GEN-LAST:event_jcmbButtonholeMasterItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jcmbButtonholeMaster.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a buttonhole master", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            populatetable();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jdteTakeDate.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please select a date", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblButtonholeMaster.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Select an item to take", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                int i = 0;
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt = con.createStatement();
                selected = jtblButtonholeMaster.getSelectedRows();
                for (int j = 0; j < selected.length; j++) {
                    if (!jtblButtonholeMaster.getValueAt(selected[j], 8).equals("C")) {
                        query = "update trn_buttonhole set date_recieved='" + new SimpleDateFormat("yyyy-MM-dd").format(jdteTakeDate.getDate()) + "', date_updated='" + today + "',flag='I',status ='C' where sl_no = '" + jtblButtonholeMaster.getValueAt(selected[j], 0) + "' ";
                        i = stmt.executeUpdate(query);
                    }
                }
                if (i > 0) {
                    JOptionPane.showMessageDialog(this, "Update Successfull!", "Info", JOptionPane.INFORMATION_MESSAGE);
                    con.commit();
                    jButton1ActionPerformed(evt);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    private void populatetable() {
        try {
            rowcount = model1.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model1.removeRow(0);
            }
            rowcount = model2.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model2.removeRow(0);
            }
            bhno = jcmbButtonholeMaster.getSelectedItem().toString().split("   ");
            con = new DBConnection().connect();
            stmt = con.createStatement();
            if (jcmbStatus.getSelectedItem().equals("Pending")) {
                if (jdteDate.getDate() == null) {
                    query = "select a.sl_no,b.order_no,b.student_name,e.bh_master_name,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_buttonhole a left join mst_student b on a.stsl_no = b.stsl_no left join mst_item d on a.item_no = d.item_no left join mst_buttonhole e on a.bh_no = e.bh_no where a.bh_no = '" + bhno[0] + "' and a.status = 'P' and a.flag!='D' and b.flag!='D' and d.flag!='D' and e.flag!='D'";
                } else {
                    query = "select a.sl_no,b.order_no,b.student_name,e.bh_master_name,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_buttonhole a left join mst_student b on a.stsl_no = b.stsl_no left join mst_item d on a.item_no = d.item_no left join mst_buttonhole e on a.bh_no = e.bh_no where a.bh_no = '" + bhno[0] + "' and a.date_given = '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate.getDate()) + "' and a.status = 'P' and a.flag!='D' and b.flag!='D' and d.flag!='D' and e.flag!='D'";
                    populateitem("select d.item_name,sum(a.qty) from trn_buttonhole a left join mst_student b on a.stsl_no = b.stsl_no left join mst_item d on a.item_no = d.item_no left join mst_buttonhole e on a.bh_no = e.bh_no where a.bh_no = '" + bhno[0] + "' and a.date_given = '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate.getDate()) + "' and a.status = 'P' and a.flag!='D' and b.flag!='D' and d.flag!='D' and e.flag!='D' group by a.item_no");
                }
            } else if (jcmbStatus.getSelectedItem().equals("Completed")) {
                if (jdteDate.getDate() == null) {
                    query = "select a.sl_no,b.order_no,b.student_name,e.bh_master_name,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_buttonhole a left join mst_student b on a.stsl_no = b.stsl_no left join mst_item d on a.item_no = d.item_no left join mst_buttonhole e on a.bh_no = e.bh_no where a.bh_no = '" + bhno[0] + "' and a.status = 'C' and a.flag!='D' and b.flag!='D' and d.flag!='D' and e.flag!='D'";
                } else {
                    query = "select a.sl_no,b.order_no,b.student_name,e.bh_master_name,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_buttonhole a left join mst_student b on a.stsl_no = b.stsl_no left join mst_item d on a.item_no = d.item_no left join mst_buttonhole e on a.bh_no = e.bh_no where a.bh_no = '" + bhno[0] + "'  and a.date_recieved = '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate.getDate()) + "' and a.status = 'C' and a.flag!='D' and b.flag!='D' and d.flag!='D' and e.flag!='D'";
                    populateitem("select d.item_name,sum(a.qty) from trn_buttonhole a left join mst_student b on a.stsl_no = b.stsl_no left join mst_item d on a.item_no = d.item_no left join mst_buttonhole e on a.bh_no = e.bh_no where a.bh_no = '" + bhno[0] + "' and a.date_recieved = '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate.getDate()) + "' and a.status = 'C' and a.flag!='D' and b.flag!='D' and d.flag!='D' and e.flag!='D' group by a.item_no");
                }
            }
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                model1.addRow(new Object[]{});
                temp = model1.getRowCount() - 1;
                jtblButtonholeMaster.setValueAt(rs.getString(1), temp, 0);
                jtblButtonholeMaster.setValueAt(rs.getString(2), temp, 1);
                jtblButtonholeMaster.setValueAt(rs.getString(3), temp, 2);
                jtblButtonholeMaster.setValueAt(rs.getString(4), temp, 3);
                jtblButtonholeMaster.setValueAt(rs.getString(5), temp, 4);
                jtblButtonholeMaster.setValueAt(rs.getString(6), temp, 5);
                jtblButtonholeMaster.setValueAt(rs.getString(7), temp, 6);
                jtblButtonholeMaster.setValueAt(rs.getString(8), temp, 7);
                jtblButtonholeMaster.setValueAt(rs.getString(9), temp, 8);
            }
            if (jcmbStatus.getSelectedItem().equals("Pending") && jtblButtonholeMaster.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "There are no pending items with buttonhole master");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    private void populateitem(String q) {
        try {
            rowcount = model2.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model2.removeRow(0);
            }
            rs = stmt.executeQuery(q);
            while (rs.next()) {
                model2.addRow(new Object[]{});
                jtblItem.setValueAt(rs.getString(1), model2.getRowCount() - 1, 0);
                jtblItem.setValueAt(rs.getString(2), model2.getRowCount() - 1, 1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(JIFraViewPendingCM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox jcmbButtonholeMaster;
    private javax.swing.JComboBox jcmbStatus;
    private com.toedter.calendar.JDateChooser jdteDate;
    private com.toedter.calendar.JDateChooser jdteTakeDate;
    private javax.swing.JTable jtblButtonholeMaster;
    private javax.swing.JTable jtblItem;
    // End of variables declaration//GEN-END:variables
}
