/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rose;

import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joel
 */
public class JIFraAddMaterialConsumption extends javax.swing.JInternalFrame {

    String text;
    DefaultTableModel model1;
    DefaultTableModel model2;
    Connection con = null;
    ResultSet rs = null;
    Statement stmt = null;
    String query = null;
    String[] orderno, itemno, materialno;
    int rowcount = 0, stsl = 0, count = 0, classno;
    String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
    boolean check;

    public JIFraAddMaterialConsumption() {
        try {
            initComponents();
            model1 = (DefaultTableModel) jtblTemp.getModel();
            model2 = (DefaultTableModel) jtblMaterial.getModel();
            con = new DBConnection().connect();
            stmt = con.createStatement();
            query = "select distinct(b.order_no),b.student_name from trn_cm a join  mst_student b on a.stsl_no = b.stsl_no  where a.status = 'C' and b.school_no='" + Global.getSchoolno() + "' and a.flag!= 'D' and b.flag!= 'D' ";
            rs = stmt.executeQuery(query);
            jcmbOrderNo.addItem("");
            while (rs.next()) {
                jcmbOrderNo.addItem(rs.getString(1) + "   " + rs.getString(2));
            }
            MyTraversalPolicy policy = new MyTraversalPolicy();
            setFocusTraversalPolicy(policy);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }
    private class MyTraversalPolicy extends FocusTraversalPolicy{

        @Override
        public Component getComponentAfter(Container aContainer, Component aComponent) {
            if(aComponent.equals(jcmbOrderNo)){
                return jcmbItem;
            }else if(aComponent.equals(jcmbItem)){
                return jcmbMaterial;
            }else if(aComponent.equals(jcmbMaterial)){
                return jtxtAConsumption;
            }else if(aComponent.equals(jtxtAConsumption)){
                return jtxtFConsumption;
            }else if(aComponent.equals(jtxtFConsumption)){
                return jbtnAdd;
            }else if(aComponent.equals(jbtnAdd)){
                return jbtnDelete;
            }else if(aComponent.equals(jbtnDelete)){
                return jbtnSave;
            }else if(aComponent.equals(jbtnSave)){
                return jcmbOrderNo;
            }else
            return jcmbOrderNo;
        }

        @Override
        public Component getComponentBefore(Container aContainer, Component aComponent) {
              if(aComponent.equals(jcmbOrderNo)){
                return jbtnSave;
            }else if(aComponent.equals(jcmbItem)){
                return jcmbOrderNo;
            }else if(aComponent.equals(jcmbMaterial)){
                return jcmbItem;
            }else if(aComponent.equals(jtxtAConsumption)){
                return jcmbMaterial;
            }else if(aComponent.equals(jtxtFConsumption)){
                return jtxtAConsumption;
            }else if(aComponent.equals(jbtnAdd)){
                return jtxtFConsumption;
            }else if(aComponent.equals(jbtnDelete)){
                return jbtnAdd;
            }else if(aComponent.equals(jbtnSave)){
                return jbtnDelete;
            }else
            return jcmbOrderNo;
        }

        @Override
        public Component getFirstComponent(Container aContainer) {
            return jcmbOrderNo;
        }

        @Override
        public Component getLastComponent(Container aContainer) {
            return jbtnSave;
        }

        @Override
        public Component getDefaultComponent(Container aContainer) {
            return jcmbOrderNo;
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcmbOrderNo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jcmbItem = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jcmbMaterial = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jtxtAConsumption = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtxtFConsumption = new javax.swing.JTextField();
        jbtnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblTemp = new javax.swing.JTable();
        jbtnDelete = new javax.swing.JButton();
        jbtnSave = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblMaterial = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jtxtClass = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Add Material Consumption");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Order No.");

        jcmbOrderNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbOrderNoItemStateChanged(evt);
            }
        });

        jLabel2.setText("Item");

        jcmbItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbItemItemStateChanged(evt);
            }
        });

        jLabel3.setText("Material");

        jLabel4.setText("Tailor consumption");

        jtxtAConsumption.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtAConsumptionKeyPressed(evt);
            }
        });

        jLabel5.setText("School consumption");

        jtxtFConsumption.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtFConsumptionKeyPressed(evt);
            }
        });

        jbtnAdd.setText("Add");
        jbtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddActionPerformed(evt);
            }
        });

        jtblTemp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item no.", "Item", "Material no.", "Material", "Real", "Fixed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblTemp);
        jtblTemp.getColumnModel().getColumn(0).setMaxWidth(60);
        jtblTemp.getColumnModel().getColumn(2).setMaxWidth(70);
        jtblTemp.getColumnModel().getColumn(4).setMaxWidth(50);
        jtblTemp.getColumnModel().getColumn(5).setMaxWidth(50);

        jbtnDelete.setText("Delete");
        jbtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteActionPerformed(evt);
            }
        });

        jbtnSave.setText("Save");
        jbtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSaveActionPerformed(evt);
            }
        });

        jtblMaterial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Material", "Tailor Consumption", "School Consumption"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtblMaterial);
        jtblMaterial.getColumnModel().getColumn(2).setMinWidth(110);
        jtblMaterial.getColumnModel().getColumn(2).setMaxWidth(110);
        jtblMaterial.getColumnModel().getColumn(3).setMinWidth(110);
        jtblMaterial.getColumnModel().getColumn(3).setMaxWidth(110);

        jLabel6.setText("Class");

        jtxtClass.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jbtnAdd)
                                .addComponent(jbtnDelete)
                                .addComponent(jbtnSave))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(jScrollPane2)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jcmbOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jcmbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(30, 30, 30)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtxtClass, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jcmbItem, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(13, 13, 13)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtAConsumption, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtFConsumption, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcmbOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jcmbItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcmbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jtxtClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtxtAConsumption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jtxtFConsumption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbtnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnSave))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaveActionPerformed
        try {
            if (jtblTemp.getRowCount() > 0) {
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt = con.createStatement();
                rowcount = jtblTemp.getRowCount();
                check = true;
                for (int i = 0; i < rowcount; i++) {
                    query = "select count(material_no) from mst_school_mat_price where item_no = '" + jtblTemp.getValueAt(i, 0) + "' and school_no = '" + Global.getSchoolno() + "' and flag!= 'D'";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        count = rs.getInt(1);
                    }
                    for (int j = 0; j < rowcount; j++) {
                        if (jtblTemp.getValueAt(i, 0).equals(jtblTemp.getValueAt(j, 0))) {
                            count--;
                        }
                    }
                    if (count != 0) {
                        check = false;
                    }
                }
                if (check) {
                    count = 0;
                    for (int i = 0; i < rowcount; i++) {
                        query = "INSERT INTO mst_student_mat_detail (STSL_NO, ITEM_NO, MATERIAL_NO, FIXED_MAT_LENGTH, ACTUAL_MAT_LENGTH, FLAG, DATE_CREATED) VALUES ('" + stsl + "', '" + jtblTemp.getValueAt(i, 0) + "', '" + jtblTemp.getValueAt(i, 2) + "', '" + jtblTemp.getValueAt(i, 5) + "', '" + jtblTemp.getValueAt(i, 4) + "', 'I', '" + today + "');";
                        count = count + stmt.executeUpdate(query);
                    }
                    if (count == jtblTemp.getRowCount()) {
                        con.commit();
                        JOptionPane.showMessageDialog(this, "Saved successfully", "Info", JOptionPane.INFORMATION_MESSAGE);
                        jcmbItem.setSelectedItem("");
                        jtxtAConsumption.setText("");
                        jtxtFConsumption.setText("");
                        populatematerialtable(stsl);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter all material details for the item", "Info", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter details and click save", "Info", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_jbtnSaveActionPerformed
    private void populatematerialtable(int orderno) {
        try {
            rowcount = jtblMaterial.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model2.removeRow(0);
            }
            rowcount = jtblTemp.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model1.removeRow(0);
            }
            con = new DBConnection().connect();
            stmt = con.createStatement();
            query = "select b.item_name,c.material_name,a.fixed_mat_length,a.actual_mat_length from mst_student_mat_detail a join mst_item b on a.item_no = b.item_no join mst_material c on a.material_no = c.material_no where stsl_no = '" + orderno + "' and a.flag!= 'D' and b.flag!= 'D' and c.flag!= 'D'";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                rowcount = jtblMaterial.getRowCount();
                model2.addRow(new Object[]{""});
                jtblMaterial.setValueAt(rs.getString(1), rowcount, 0);
                jtblMaterial.setValueAt(rs.getString(2), rowcount, 1);
                jtblMaterial.setValueAt(rs.getString(4), rowcount, 2);
                jtblMaterial.setValueAt(rs.getString(3), rowcount, 3);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }
    private void jcmbOrderNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbOrderNoItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            jcmbItem.removeAllItems();
            jcmbMaterial.removeAllItems();
            jtxtClass.setText("");
            rowcount = jtblTemp.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model1.removeRow(0);
            }
            if (!jcmbOrderNo.getSelectedItem().equals("")) {
                try {
                    con = new DBConnection().connect();
                    stmt = con.createStatement();
                    orderno = jcmbOrderNo.getSelectedItem().toString().split("   ");
                    query = "select stsl_no,class_no from mst_student where order_no ='" + orderno[0] + "' and school_no = '" + Global.getSchoolno() + "' and flag!= 'D' ";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        stsl = rs.getInt(1);
                        classno = rs.getInt(2);
                    }
                    query = "select class from mst_class where class_no = '" + classno + "' and flag!='D'";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        jtxtClass.setText(rs.getString(1));
                    }
                    query = "select distinct(a.item_no),b.item_name from trn_cm a join mst_item b on a.item_no = b.item_no join mst_student_detail c on a.item_no = c.item_no  where a.stsl_no = '" + stsl + "' and a.status = 'C' and a.flag!= 'D' and b.flag!= 'D' and c.flag!='D'";
                    rs = stmt.executeQuery(query);
                    jcmbItem.removeAllItems();
                    jcmbItem.addItem("");
                    while (rs.next()) {
                        jcmbItem.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                    populatematerialtable(stsl);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } finally {
                    try {
                        if (!rs.isClosed()) {
                            rs.close();
                        }
                        if (!con.isClosed()) {
                            con.close();
                        }
                        if (!stmt.isClosed()) {
                            stmt.isClosed();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jcmbOrderNoItemStateChanged

    private void jcmbItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbItemItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (!jcmbItem.getSelectedItem().equals("")) {
                try {
                    con = new DBConnection().connect();
                    stmt = con.createStatement();
                    itemno = jcmbItem.getSelectedItem().toString().split("   ");
                    query = "select a.material_no,b.material_name from mst_school_mat_price a join mst_material b on a.material_no = b.material_no where a.item_no = '" + itemno[0] + "' and a.school_no = '" + Global.getSchoolno() + "' and a.flag!= 'D' and b.flag!= 'D'";
                    rs = stmt.executeQuery(query);
                    jcmbMaterial.removeAllItems();
                    while (rs.next()) {
                        jcmbMaterial.addItem(rs.getString(1) + "   " + rs.getString(2));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } finally {
                    try {
                        if (!rs.isClosed()) {
                            rs.close();
                        }
                        if (!con.isClosed()) {
                            con.close();
                        }
                        if (!stmt.isClosed()) {
                            stmt.isClosed();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            } else {
                jcmbMaterial.removeAllItems();
            }
        }
    }//GEN-LAST:event_jcmbItemItemStateChanged

    private void jtxtAConsumptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtAConsumptionKeyPressed
        text = "";
        text = jtxtAConsumption.getText();
        if (text.length() == 6) {
            jtxtAConsumption.setEditable(false);
            if (evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
                jtxtAConsumption.setEditable(true);
            }
        } else if (evt.getKeyChar() >= evt.VK_0 && evt.getKeyChar() <= evt.VK_9 || evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT || evt.getKeyChar() == evt.VK_PERIOD) {
            jtxtAConsumption.setEditable(true);
        } else {
            jtxtAConsumption.setEditable(false);
        }
    }//GEN-LAST:event_jtxtAConsumptionKeyPressed

    private void jtxtFConsumptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtFConsumptionKeyPressed
        text = "";
        text = jtxtFConsumption.getText();
        if (text.length() == 6) {
            jtxtFConsumption.setEditable(false);
            if (evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
                jtxtFConsumption.setEditable(true);
            }
        } else if (evt.getKeyChar() >= evt.VK_0 && evt.getKeyChar() <= evt.VK_9 || evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT || evt.getKeyChar() == evt.VK_PERIOD) {
            jtxtFConsumption.setEditable(true);
        } else {
            jtxtFConsumption.setEditable(false);
        }
    }//GEN-LAST:event_jtxtFConsumptionKeyPressed

    private void jbtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddActionPerformed

        if (jcmbOrderNo.getSelectedItem() == null || jcmbOrderNo.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select an order number", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbItem.getSelectedItem() == null || jcmbItem.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select an item", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbMaterial.getSelectedItem() == null || jcmbMaterial.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a material", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtFConsumption.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter fixed consumption", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtAConsumption.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter real consumption", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                itemno = jcmbItem.getSelectedItem().toString().split("   ");
                materialno = jcmbMaterial.getSelectedItem().toString().split("   ");
                con = new DBConnection().connect();
                stmt = con.createStatement();
                query = "select item_no from mst_student_mat_detail where stsl_no = '" + stsl + "' and item_no = '" + itemno[0] + "' and flag!= 'D'";
                rs = stmt.executeQuery(query);
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "Material consumption for this item exists,\n Please select another item", "Info", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    check = true;
                    rowcount = jtblTemp.getRowCount();
                    for (int i = 0; i < rowcount; i++) {
                        if ((jtblTemp.getValueAt(i, 0).equals(itemno[0]) && (jtblTemp.getValueAt(i, 2).equals(materialno[0])))) {
                            check = false;
                        }
                    }
                    if (check) {
                        itemno = jcmbItem.getSelectedItem().toString().split("   ");
                        materialno = jcmbMaterial.getSelectedItem().toString().split("   ");
                        model1.addRow(new Object[]{""});
                        jtblTemp.setValueAt(itemno[0], jtblTemp.getRowCount() - 1, 0);
                        jtblTemp.setValueAt(itemno[1], jtblTemp.getRowCount() - 1, 1);
                        jtblTemp.setValueAt(materialno[0], jtblTemp.getRowCount() - 1, 2);
                        jtblTemp.setValueAt(materialno[1], jtblTemp.getRowCount() - 1, 3);
                        jtblTemp.setValueAt(jtxtAConsumption.getText().trim(), jtblTemp.getRowCount() - 1, 4);
                        jtblTemp.setValueAt(jtxtFConsumption.getText().trim(), jtblTemp.getRowCount() - 1, 5);
                        jtxtAConsumption.setText("");
                        jtxtFConsumption.setText("");
                        jcmbItem.grabFocus();
                    } else {
                        JOptionPane.showMessageDialog(this, "Material consumption for this item exists", "Info", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jbtnAddActionPerformed

    private void jbtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteActionPerformed
        int selectedrow = jtblTemp.getSelectedRow();
        if (selectedrow > -1) {
            model1.removeRow(selectedrow);
        } else {
            if (jtblTemp.getRowCount() > 0) {
                model1.removeRow(jtblTemp.getRowCount() - 1);
            }
        }

    }//GEN-LAST:event_jbtnDeleteActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnAdd;
    private javax.swing.JButton jbtnDelete;
    private javax.swing.JButton jbtnSave;
    private javax.swing.JComboBox jcmbItem;
    private javax.swing.JComboBox jcmbMaterial;
    private javax.swing.JComboBox jcmbOrderNo;
    private javax.swing.JTable jtblMaterial;
    private javax.swing.JTable jtblTemp;
    private javax.swing.JTextField jtxtAConsumption;
    private javax.swing.JTextField jtxtClass;
    private javax.swing.JTextField jtxtFConsumption;
    // End of variables declaration//GEN-END:variables
}
