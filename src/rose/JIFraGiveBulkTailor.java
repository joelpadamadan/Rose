/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rose;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joel
 */
public class JIFraGiveBulkTailor extends javax.swing.JInternalFrame {

    DefaultTableModel model1;
    DefaultTableModel model2;
    Connection con = null;
    ResultSet rs = null;
    ResultSet rs1 = null;
    ResultSet rs2 = null;
    Statement stmt = null;
    Statement stmt1 = null;
    Statement stmt2 = null;
    String query = null;
    String[] groupno, tailorno;
    int rowcount = 0, temp = 0, item_no = 0, stsl;
    int[] selected;
    String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
     

    public JIFraGiveBulkTailor() {
        try {
            initComponents();
            model1 = (DefaultTableModel) jtblCuttingMaster.getModel();
            model2 = (DefaultTableModel) jtblStitchingMaster.getModel();
            jtblCuttingMaster.setAutoCreateRowSorter(true);
            con = new DBConnection().connect();
            stmt = con.createStatement();
            query = "select group_no,cutting_master from mst_group where flag!='D' and year(date_created)='" + Global.year + "'";
            rs = stmt.executeQuery(query);
            jcmbCuttingMaster.addItem("");
            while (rs.next()) {
                jcmbCuttingMaster.addItem(rs.getString(1) + "   " + rs.getString(2));
            }
            query = "select tailor_no,tailor_name from mst_tailor where flag!='D' and year(date_created)='" + Global.year + "'";
            rs = stmt.executeQuery(query);
            jcmbStitchingMaster.addItem("");
            while (rs.next()) {
                jcmbStitchingMaster.addItem(rs.getString(1) + "   " + rs.getString(2));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcmbCuttingMaster = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jdteDate = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblCuttingMaster = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jcmbStitchingMaster = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jdteDate1 = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblStitchingMaster = new javax.swing.JTable();
        jbtnView = new javax.swing.JButton();
        jbtnGive = new javax.swing.JButton();

        setClosable(true);
        setTitle("Give Bulk Tailor");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Cutting Master");

        jLabel3.setText("Date");

        jtblCuttingMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Order No.", "Student Name", "Cutting Master", "Item", "Quantity", "Date Given", "Date Recieved", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblCuttingMaster);
        jtblCuttingMaster.getColumnModel().getColumn(0).setMinWidth(0);
        jtblCuttingMaster.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblCuttingMaster.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblCuttingMaster.getColumnModel().getColumn(1).setPreferredWidth(70);
        jtblCuttingMaster.getColumnModel().getColumn(5).setPreferredWidth(55);
        jtblCuttingMaster.getColumnModel().getColumn(6).setPreferredWidth(100);
        jtblCuttingMaster.getColumnModel().getColumn(7).setPreferredWidth(100);
        jtblCuttingMaster.getColumnModel().getColumn(8).setPreferredWidth(50);

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Stitching Master");

        jLabel5.setText("Date");

        jdteDate1.setDateFormatString("dd-MM-yyyy");

        jtblStitchingMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Order No.", "Student Name", "Stitching Master", "Item", "Quantity", "Date Given", "Date Recieved", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtblStitchingMaster);
        jtblStitchingMaster.getColumnModel().getColumn(0).setMinWidth(0);
        jtblStitchingMaster.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblStitchingMaster.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblStitchingMaster.getColumnModel().getColumn(1).setPreferredWidth(70);
        jtblStitchingMaster.getColumnModel().getColumn(5).setPreferredWidth(55);
        jtblStitchingMaster.getColumnModel().getColumn(6).setPreferredWidth(100);
        jtblStitchingMaster.getColumnModel().getColumn(7).setPreferredWidth(100);
        jtblStitchingMaster.getColumnModel().getColumn(8).setPreferredWidth(50);

        jbtnView.setText("View");
        jbtnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnViewActionPerformed(evt);
            }
        });

        jbtnGive.setText("Give");
        jbtnGive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGiveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbStitchingMaster, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdteDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnView)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnGive)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcmbCuttingMaster, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(312, 312, 312)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jdteDate, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                                .addComponent(jButton1)))
                        .addGap(9, 9, 9))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jcmbCuttingMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(jLabel3))
                    .addComponent(jdteDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jcmbStitchingMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jdteDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtnView)
                        .addComponent(jbtnGive)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jcmbCuttingMaster.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a cutting master", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            populateCMtable();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jbtnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnViewActionPerformed
        if (jcmbStitchingMaster.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a stitching master", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            populateTailorTable();
        }
    }//GEN-LAST:event_jbtnViewActionPerformed

    private void jbtnGiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGiveActionPerformed
        if (jcmbStitchingMaster.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a stitching master", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jdteDate1.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Please select a date", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblCuttingMaster.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Please select a record from table to give", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                tailorno = jcmbStitchingMaster.getSelectedItem().toString().split("   ");
                con = new DBConnection().connect();
                stmt1 = con.createStatement();
                stmt = con.createStatement();
                stmt2 = con.createStatement();
                con.setAutoCommit(false);
                int i = 0;
                temp = 0;
                selected = jtblCuttingMaster.getSelectedRows();
                for (int j = 0; j < selected.length; j++) {
                    query = "select item_no from trn_cm where sl_no = '" + jtblCuttingMaster.getValueAt(selected[j], 0) + "' and flag!='D' and year(date_created)='"+Global.year+"'";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        item_no = rs.getInt(1);
                    }
                    query = "select stsl_no from mst_student where order_no = '" + jtblCuttingMaster.getValueAt(selected[j], 1) + "' and flag!='D' and year(date_created)='"+Global.year+"' ";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        stsl = rs.getInt(1);
                    }
                    query = "select item_no,sum(qty) from trn_cm where stsl_no = '" + stsl + "' and item_no = '" + item_no + "' and status = 'C' and flag!='D' and year(date_created)='"+Global.year+"' group by item_no";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        if (rs.getInt(2) >= Integer.parseInt(jtblCuttingMaster.getValueAt(selected[j], 5).toString())) {
                            query = "select item_no,sum(qty) from trn_stitching where stsl_no = '" + stsl + "' and item_no ='" + item_no + "' and flag!='D' and year(date_created)='"+Global.year+"' group by item_no";
                            rs1 = stmt1.executeQuery(query);
                            if (rs1.next()) {
                                temp = rs.getInt(2) - rs1.getInt(2);
                                if (temp > 0) {
                                    if (temp >= Integer.parseInt(jtblCuttingMaster.getValueAt(selected[j], 5).toString())) {
                                        query = "select sl_no,qty from trn_stitching where stsl_no ='" + stsl + "' and item_no = '" + rs.getString(1) + "' and date_given = '" + today + "' and tailor_no = '" + tailorno[0] + "' and status='P' and flag!='D' and year(date_created)='"+Global.year+"'";
                                        rs2 = stmt2.executeQuery(query);
                                        if (rs2.next()) {
                                            temp = Integer.parseInt(jtblCuttingMaster.getValueAt(selected[j], 5).toString()) + rs2.getInt(2);
                                            query = "update trn_stitching set qty = '" + temp + "' where sl_no='" + rs2.getString(1) + "'";
                                            i = i + stmt2.executeUpdate(query);
                                        } else {
                                            query = "insert into trn_stitching(tailor_no,stsl_no,item_no,qty,status,date_given,flag,date_created) values('" + tailorno[0] + "','" + stsl + "','" + item_no + "','" + jtblCuttingMaster.getValueAt(selected[j], 5).toString() + "','P','" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate1.getDate()) + "','I','" + today + "')";
                                            i = i + stmt2.executeUpdate(query);
                                        }
                                    }
                                }
                            } else {
                                query = "insert into trn_stitching(tailor_no,stsl_no,item_no,qty,status,date_given,flag,date_created) values('" + tailorno[0] + "','" + stsl + "','" + item_no + "','" + jtblCuttingMaster.getValueAt(selected[j], 5).toString() + "','P','" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate1.getDate()) + "','I','" + today + "')";
                                i = i + stmt1.executeUpdate(query);
                            }
                        }
                    }
                }
                if (i > 0) {
                    con.commit();
                    JOptionPane.showMessageDialog(this, "Inserted Successfull!", "Info", JOptionPane.INFORMATION_MESSAGE);
                    populateTailorTable();
                    jdteDate1.setDate(null);
                }
            } catch (SQLException ex) {
                Logger.getLogger(JIFraGiveBulkTailor.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!rs1.isClosed()) {
                        rs1.close();
                    }
                    if (!rs2.isClosed()) {
                        rs2.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                    if (!stmt1.isClosed()) {
                        stmt1.isClosed();
                    }
                    if (!stmt2.isClosed()) {
                        stmt2.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jbtnGiveActionPerformed
    private void populateTailorTable() {
        try {
            rowcount = model2.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model2.removeRow(0);
            }
            tailorno = jcmbStitchingMaster.getSelectedItem().toString().split("   ");
            con = new DBConnection().connect();
            stmt = con.createStatement();

            if (jdteDate1.getDate() == null) {
                query = "select a.sl_no,b.order_no,b.student_name,e.tailor_name,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_stitching a left join mst_student b on a.stsl_no = b.stsl_no left join mst_item d on a.item_no = d.item_no left join mst_tailor e on a.tailor_no = e.tailor_no where a.tailor_no = '" + tailorno[0] + "' and b.school_no = '" + Global.getSchoolno() + "' and a.status='P' and a.flag!='D'  and b.flag!='D'  and d.flag!='D'  and e.flag!='D'";
            } else {
                query = "select a.sl_no,b.order_no,b.student_name,e.tailor_name,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_stitching a left join mst_student b on a.stsl_no = b.stsl_no left join mst_item d on a.item_no = d.item_no left join mst_tailor e on a.tailor_no = e.tailor_no where a.tailor_no = '" + tailorno[0] + "' and b.school_no = '" + Global.getSchoolno() + "' and a.date_given = '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate1.getDate()) + "' and a.status='P' and a.flag!='D'  and b.flag!='D'  and d.flag!='D'  and e.flag!='D'";
            }
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                temp = model2.getRowCount();
                model2.addRow(new Object[]{});
                jtblStitchingMaster.setValueAt(rs.getString(1), temp, 0);
                jtblStitchingMaster.setValueAt(rs.getString(2), temp, 1);
                jtblStitchingMaster.setValueAt(rs.getString(3), temp, 2);
                jtblStitchingMaster.setValueAt(rs.getString(4), temp, 3);
                jtblStitchingMaster.setValueAt(rs.getString(5), temp, 4);
                jtblStitchingMaster.setValueAt(rs.getString(6), temp, 5);
                jtblStitchingMaster.setValueAt(rs.getString(7), temp, 6);
                jtblStitchingMaster.setValueAt(rs.getString(8), temp, 7);
                jtblStitchingMaster.setValueAt(rs.getString(9), temp, 8);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    private void populateCMtable() {
        try {
            con = new DBConnection().connect();
            stmt = con.createStatement();
            groupno = jcmbCuttingMaster.getSelectedItem().toString().split("   ");
            rowcount = model1.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model1.removeRow(0);
            }
            if (jdteDate.getDate() == null) {
                query = "select a.sl_no,b.order_no,b.student_name,c.cutting_master,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_cm a,mst_student b,mst_group c,mst_item d where a.group_no = c.group_no and a.stsl_no = b.stsl_no and b.school_no = '" + Global.getSchoolno() + "' and d.item_no = a.item_no and a.status = 'C' and a.flag != 'D' and b.flag != 'D' and c.flag != 'D' and d.flag != 'D' and a.group_no = '" + groupno[0] + "' ";
            } else {
                query = "select a.sl_no,b.order_no,b.student_name,c.cutting_master,d.item_name,a.qty,a.date_given,a.date_recieved,a.status from trn_cm a,mst_student b,mst_group c,mst_item d where a.group_no = c.group_no and a.stsl_no = b.stsl_no and b.school_no = '" + Global.getSchoolno() + "'  and a.date_recieved = '" + new SimpleDateFormat("yyyy-MM-dd").format(jdteDate.getDate()) + "'  and d.item_no = a.item_no and a.status = 'C' and a.flag != 'D' and b.flag != 'D' and c.flag != 'D' and d.flag != 'D' and a.group_no = '" + groupno[0] + "' ";
            }
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                rowcount = model1.getRowCount();
                model1.addRow(new Object[]{});
                jtblCuttingMaster.setValueAt(rs.getString(1), rowcount, 0);
                jtblCuttingMaster.setValueAt(rs.getString(2), rowcount, 1);
                jtblCuttingMaster.setValueAt(rs.getString(3), rowcount, 2);
                jtblCuttingMaster.setValueAt(rs.getString(4), rowcount, 3);
                jtblCuttingMaster.setValueAt(rs.getString(5), rowcount, 4);
                jtblCuttingMaster.setValueAt(rs.getString(6), rowcount, 5);
                jtblCuttingMaster.setValueAt(rs.getString(7), rowcount, 6);
                jtblCuttingMaster.setValueAt(rs.getString(8), rowcount, 7);
                jtblCuttingMaster.setValueAt(rs.getString(9), rowcount, 8);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnGive;
    private javax.swing.JButton jbtnView;
    private javax.swing.JComboBox jcmbCuttingMaster;
    private javax.swing.JComboBox jcmbStitchingMaster;
    private com.toedter.calendar.JDateChooser jdteDate;
    private com.toedter.calendar.JDateChooser jdteDate1;
    private javax.swing.JTable jtblCuttingMaster;
    private javax.swing.JTable jtblStitchingMaster;
    // End of variables declaration//GEN-END:variables
}
