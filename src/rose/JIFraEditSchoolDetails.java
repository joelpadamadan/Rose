/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rose;

import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joel
 */
public class JIFraEditSchoolDetails extends javax.swing.JInternalFrame {

    Connection con = null;
    DefaultTableModel model1;
    DefaultTableModel model2;
    DefaultTableModel model3;
    ResultSet rs = null;
    Statement stmt = null;
    String query, text;
    int rowcount, c, cat_id, item_no, bh, setno = 0, sl_no;
    double cc, sc, bc, ic, pc, me, icost;
    String[] school, material;
     
    String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
    boolean added = false;

    public JIFraEditSchoolDetails() {
        initComponents();
        item_no = 0;
        sl_no = 0;
        model1 = (DefaultTableModel) jtblItemDetails.getModel();
        model2 = (DefaultTableModel) jtblItem.getModel();
        model3 = (DefaultTableModel) jtblMaterialDetails.getModel();
        jbtnMSave.setVisible(false);
        jtblItemDetails.setAutoCreateRowSorter(true);
        jtblItemDetails.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        try {
            con = new DBConnection().connect();
            stmt = con.createStatement();

            query = "select school_no,school_name from mst_school where flag != 'D' and year(date_created)='" + Global.year + "' ";
            rs = stmt.executeQuery(query);
            jcmbSchool.addItem("");
            while (rs.next()) {
                jcmbSchool.addItem(rs.getString(1) + "   " + rs.getString(2));
            }

            query = "select set_name from mst_set where flag != 'D'";
            rs = stmt.executeQuery(query);
            jcmbSet.addItem("");
            while (rs.next()) {
                jcmbSet.addItem(rs.getString(1));
            }

            query = "select class from mst_class where flag != 'D'";
            rs = stmt.executeQuery(query);
            jcmbClassFrom.addItem("");
            jcmbClassTo.addItem("");
            while (rs.next()) {
                jcmbClassFrom.addItem(rs.getString(1));
                jcmbClassTo.addItem(rs.getString(1));
            }

            query = "select cat_name from mst_category where flag != 'D'";
            rs = stmt.executeQuery(query);
            jcmbCategory.addItem("");
            while (rs.next()) {
                jcmbCategory.addItem(rs.getString(1));
            }

            query = "select material_no,material_name from mst_material where flag != 'D' and year(date_created)='" + Global.year + "'";
            rs = stmt.executeQuery(query);
            jcmbMaterial.addItem("");
            while (rs.next()) {
                jcmbMaterial.addItem(rs.getString(1) + "   " + rs.getString(2));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcmbSchool = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtblItemDetails = new javax.swing.JTable();
        jbtnIEdit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtxtItem = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jcmbCategory = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jcmbGender = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblItem = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jtxtICostPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtxtISellingPrice = new javax.swing.JTextField();
        jbtnISave = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jcmbClassFrom = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jcmbClassTo = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jcmbButtonhole = new javax.swing.JComboBox();
        jcmbSet = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jbtnIDelete = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtblMaterialDetails = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jcmbMaterial = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jtxtMCostPrice = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jtxtMSellingPrice = new javax.swing.JTextField();
        jbtnAdd = new javax.swing.JButton();
        jbtnMSave = new javax.swing.JButton();
        jbtnMDelete = new javax.swing.JButton();
        jbtnMEdit = new javax.swing.JButton();

        setClosable(true);
        setTitle("Edit School Detail");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("School");

        jcmbSchool.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbSchoolItemStateChanged(evt);
            }
        });

        jtblItemDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Item Name", "Category", "Gender", "Cutting Charge", "Stitching Charge", "Buttonhole Charge", "Ironing Charge", "Packing Charge", "Material Extra", "Cost Price", "Selling Price", "From", "To", "BH", "Set"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblItemDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblItemDetailsMouseClicked(evt);
            }
        });
        jtblItemDetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtblItemDetailsKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jtblItemDetails);
        jtblItemDetails.getColumnModel().getColumn(0).setMinWidth(0);
        jtblItemDetails.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblItemDetails.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblItemDetails.getColumnModel().getColumn(1).setPreferredWidth(200);
        jtblItemDetails.getColumnModel().getColumn(2).setPreferredWidth(110);
        jtblItemDetails.getColumnModel().getColumn(3).setPreferredWidth(70);
        jtblItemDetails.getColumnModel().getColumn(4).setPreferredWidth(100);
        jtblItemDetails.getColumnModel().getColumn(5).setPreferredWidth(110);
        jtblItemDetails.getColumnModel().getColumn(6).setPreferredWidth(115);
        jtblItemDetails.getColumnModel().getColumn(7).setPreferredWidth(100);
        jtblItemDetails.getColumnModel().getColumn(8).setPreferredWidth(100);
        jtblItemDetails.getColumnModel().getColumn(9).setPreferredWidth(100);
        jtblItemDetails.getColumnModel().getColumn(10).setPreferredWidth(70);
        jtblItemDetails.getColumnModel().getColumn(11).setPreferredWidth(80);
        jtblItemDetails.getColumnModel().getColumn(12).setPreferredWidth(50);
        jtblItemDetails.getColumnModel().getColumn(13).setPreferredWidth(40);
        jtblItemDetails.getColumnModel().getColumn(14).setPreferredWidth(40);

        jbtnIEdit.setText("Edit");
        jbtnIEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnIEditActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Item"));

        jLabel2.setText("Item");

        jtxtItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtItemKeyPressed(evt);
            }
        });

        jLabel3.setText("Category");

        jLabel4.setText("Gender");

        jcmbGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Common", "Male", "Female" }));

        jtblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Cutting Charge", "Stitching Charge", "Buttonhole Charge", "Ironing Charge", "Packing Charge", "Material Extra"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtblItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtblItemFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jtblItem);

        jLabel6.setText("Cost Price");

        jtxtICostPrice.setEditable(false);

        jLabel5.setText("Selling Price");

        jtxtISellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtISellingPriceKeyPressed(evt);
            }
        });

        jbtnISave.setText("Save");
        jbtnISave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnISaveActionPerformed(evt);
            }
        });

        jLabel10.setText("Class From");

        jLabel11.setText("Class To");

        jLabel12.setText("Buttonhole");

        jcmbButtonhole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));

        jLabel13.setText("Set");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtICostPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtItem, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtISellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcmbSet, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jbtnISave))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbClassFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbClassTo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbButtonhole, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jtxtICostPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(jcmbClassFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)
                                .addComponent(jcmbClassTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12)
                                .addComponent(jcmbButtonhole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jtxtItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(jcmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(jcmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jcmbSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jtxtISellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnISave)
                .addContainerGap())
        );

        jbtnIDelete.setText("Delete");
        jbtnIDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnIDeleteActionPerformed(evt);
            }
        });

        jtblMaterialDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", "Material Name", "Cost Price", "Selling Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jtblMaterialDetails);
        jtblMaterialDetails.getColumnModel().getColumn(0).setMinWidth(0);
        jtblMaterialDetails.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblMaterialDetails.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblMaterialDetails.getColumnModel().getColumn(1).setMinWidth(0);
        jtblMaterialDetails.getColumnModel().getColumn(1).setPreferredWidth(0);
        jtblMaterialDetails.getColumnModel().getColumn(1).setMaxWidth(0);
        jtblMaterialDetails.getColumnModel().getColumn(3).setMinWidth(80);
        jtblMaterialDetails.getColumnModel().getColumn(3).setPreferredWidth(80);
        jtblMaterialDetails.getColumnModel().getColumn(3).setMaxWidth(80);
        jtblMaterialDetails.getColumnModel().getColumn(4).setMinWidth(80);
        jtblMaterialDetails.getColumnModel().getColumn(4).setPreferredWidth(80);
        jtblMaterialDetails.getColumnModel().getColumn(4).setMaxWidth(80);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Material"));

        jLabel7.setText("Material");

        jcmbMaterial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbMaterialItemStateChanged(evt);
            }
        });

        jLabel8.setText("Cost Price");

        jtxtMCostPrice.setEditable(false);

        jLabel9.setText("Selling Price");

        jtxtMSellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtMSellingPriceKeyPressed(evt);
            }
        });

        jbtnAdd.setText("Add");
        jbtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddActionPerformed(evt);
            }
        });

        jbtnMSave.setText("Save");
        jbtnMSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnMSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcmbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtxtMCostPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtxtMSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnMSave)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jcmbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jtxtMCostPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jtxtMSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnAdd)
                    .addComponent(jbtnMSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbtnMDelete.setText("Delete");
        jbtnMDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnMDeleteActionPerformed(evt);
            }
        });

        jbtnMEdit.setText("Edit");
        jbtnMEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnMEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbtnIEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnIDelete))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcmbSchool, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jbtnMEdit)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbtnMDelete))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcmbSchool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnIEdit)
                    .addComponent(jbtnIDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnMDelete)
                    .addComponent(jbtnMEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbSchoolItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbSchoolItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            clear();
            if (!jcmbSchool.getSelectedItem().equals("")) {
                populate_item();
            }
        }
    }//GEN-LAST:event_jcmbSchoolItemStateChanged

    private void clear() {
        jtxtItem.setText("");
        jcmbCategory.setSelectedItem("");
        jcmbSet.setSelectedItem("");
        jtxtICostPrice.setText("");
        jtxtISellingPrice.setText("");
        jtxtMCostPrice.setText("");
        jtxtMSellingPrice.setText("");
        jcmbClassFrom.setSelectedItem("");
        jcmbClassTo.setSelectedItem("");
        rowcount = model1.getRowCount();
        for (int i = 0; i < rowcount; i++) {
            model1.removeRow(0);
        }
        rowcount = model3.getRowCount();
        for (int i = 0; i < rowcount; i++) {
            model3.removeRow(0);
        }
        jtblItem.setValueAt(0, 0, 0);
        jtblItem.setValueAt(0, 0, 1);
        jtblItem.setValueAt(0, 0, 2);
        jtblItem.setValueAt(0, 0, 3);
        jtblItem.setValueAt(0, 0, 4);
        jtblItem.setValueAt(0, 0, 5);

    }

    private void jtblItemDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblItemDetailsMouseClicked
        if (jtblItemDetails.getSelectedRow() != -1) {
            item_no = Integer.parseInt(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 0).toString());
            populate_material();
            jcmbMaterial.setSelectedItem("");
            jtxtMCostPrice.setText("");
            jtxtMSellingPrice.setText("");
            jtblItem.setValueAt(0, 0, 0);
            jtblItem.setValueAt(0, 0, 1);
            jtblItem.setValueAt(0, 0, 2);
            jtblItem.setValueAt(0, 0, 3);
            jtblItem.setValueAt(0, 0, 4);
            jtblItem.setValueAt(0, 0, 5);
            jtxtItem.setText("");
            jcmbCategory.setSelectedItem("");
            jtxtICostPrice.setText("");
            jtxtISellingPrice.setText("");
        }
    }//GEN-LAST:event_jtblItemDetailsMouseClicked

    private void jtblItemDetailsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtblItemDetailsKeyPressed
    }//GEN-LAST:event_jtblItemDetailsKeyPressed

    private void jtxtItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtItemKeyPressed
        text = jtxtItem.getText();
        if (text.length() == 30) {
            jtxtItem.setEditable(false);
            if (evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
                jtxtItem.setEditable(true);
            }
        } else {
            jtxtItem.setEditable(true);
        }
    }//GEN-LAST:event_jtxtItemKeyPressed

    private void jtblItemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtblItemFocusLost
        cc = 0;
        sc = 0;
        bc = 0;
        ic = 0;
        pc = 0;
        me = 0;
        if (jtblItem.getValueAt(0, 0) != null && jtblItem.getValueAt(0, 0).getClass() == Double.class) {
            cc = Double.parseDouble(jtblItem.getValueAt(0, 0).toString());
        }
        if (jtblItem.getValueAt(0, 1) != null && jtblItem.getValueAt(0, 1).getClass() == Double.class) {
            sc = Double.parseDouble(jtblItem.getValueAt(0, 1).toString());
        }
        if (jtblItem.getValueAt(0, 2) != null && jtblItem.getValueAt(0, 2).getClass() == Double.class) {
            bc = Double.parseDouble(jtblItem.getValueAt(0, 2).toString());
        }
        if (jtblItem.getValueAt(0, 3) != null && jtblItem.getValueAt(0, 3).getClass() == Double.class) {
            ic = Double.parseDouble(jtblItem.getValueAt(0, 3).toString());
        }
        if (jtblItem.getValueAt(0, 4) != null && jtblItem.getValueAt(0, 4).getClass() == Double.class) {
            pc = Double.parseDouble(jtblItem.getValueAt(0, 4).toString());
        }
        if (jtblItem.getValueAt(0, 5) != null && jtblItem.getValueAt(0, 5).getClass() == Double.class) {
            me = Double.parseDouble(jtblItem.getValueAt(0, 5).toString());
        }
        icost = cc + sc + bc + ic + pc + me;
        jtxtICostPrice.setText(String.valueOf(icost));
    }//GEN-LAST:event_jtblItemFocusLost

    private void jtxtISellingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtISellingPriceKeyPressed
        text = "";
        text = jtxtISellingPrice.getText();
        if (text.length() == 5) {
            jtxtISellingPrice.setEditable(false);
            if (evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
                jtxtISellingPrice.setEditable(true);
            }
        } else if (evt.getKeyChar() >= evt.VK_0 && evt.getKeyChar() <= evt.VK_9 || evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
            jtxtISellingPrice.setEditable(true);
        } else {
            jtxtISellingPrice.setEditable(false);
        }
    }//GEN-LAST:event_jtxtISellingPriceKeyPressed

    private void jcmbMaterialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbMaterialItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (!jcmbMaterial.getSelectedItem().equals("")) {
                try {
                    material = jcmbMaterial.getSelectedItem().toString().split("   ");
                    con = new DBConnection().connect();
                    stmt = con.createStatement();
                    query = "select cost_price from mst_material where material_no = '" + material[0] + "' and flag!='D'";
                    rs = stmt.executeQuery(query);
                    if (rs.next()) {
                        jtxtMCostPrice.setText(rs.getString(1));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } finally {
                    try {
                        if (!rs.isClosed()) {
                            rs.close();
                        }
                        if (!con.isClosed()) {
                            con.close();
                        }
                        if (!stmt.isClosed()) {
                            stmt.isClosed();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jcmbMaterialItemStateChanged

    private void jtxtMSellingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtMSellingPriceKeyPressed
        text = "";
        text = jtxtMSellingPrice.getText();
        if (text.length() == 5) {
            jtxtMSellingPrice.setEditable(false);
            if (evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
                jtxtMSellingPrice.setEditable(true);
            }
        } else if (evt.getKeyChar() >= evt.VK_0 && evt.getKeyChar() <= evt.VK_9 || evt.getKeyChar() == evt.VK_BACK_SPACE || evt.getKeyChar() == evt.VK_DELETE || evt.getKeyChar() == evt.VK_LEFT || evt.getKeyChar() == evt.VK_RIGHT) {
            jtxtMSellingPrice.setEditable(true);
        } else {
            jtxtMSellingPrice.setEditable(false);
        }
    }//GEN-LAST:event_jtxtMSellingPriceKeyPressed

    private void jbtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddActionPerformed
        if (jcmbMaterial.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a material", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtMSellingPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid selling price", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            c = JOptionPane.YES_OPTION;
            if (Integer.parseInt(jtxtMCostPrice.getText()) > Integer.parseInt(jtxtMSellingPrice.getText())) {
                c = JOptionPane.showConfirmDialog(this, "cost price is greater then selling price, do you want to continue?", "Info", JOptionPane.YES_NO_OPTION);
            }
            if (c == JOptionPane.YES_OPTION) {
                try {
                    c = 0;
                    material = jcmbMaterial.getSelectedItem().toString().split("   ");
                    school = jcmbSchool.getSelectedItem().toString().split("   ");
                    con = new DBConnection().connect();
                    con.setAutoCommit(false);
                    stmt = con.createStatement();
                    query = "INSERT INTO mst_school_mat_price (SCHOOL_NO, ITEM_NO, MATERIAL_NO, SELLING_PRICE, FLAG, DATE_CREATED) VALUES ('" + school[0] + "', '" + item_no + "', '" + material[0] + "', '" + jtxtMSellingPrice.getText().trim() + "', 'I', '" + today + "');";
                    c = c + stmt.executeUpdate(query);
                    if (c > 0) {
                        con.commit();
                        JOptionPane.showMessageDialog(this, "Inserted successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
                        populate_material();
                        jcmbMaterial.setSelectedItem("");
                        jtxtMCostPrice.setText("");
                        jtxtMSellingPrice.setText("");
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } finally {
                    try {
                        if (!con.isClosed()) {
                            con.close();
                        }
                        if (!stmt.isClosed()) {
                            stmt.isClosed();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jbtnAddActionPerformed

    private void jbtnMDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnMDeleteActionPerformed
        if (sl_no != 0) {
            JOptionPane.showMessageDialog(this, "Please select a record to update", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblMaterialDetails.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select an item to delete", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                c = 0;
                sl_no = Integer.parseInt(jtblMaterialDetails.getValueAt(jtblMaterialDetails.getSelectedRow(), 0).toString());
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt = con.createStatement();
                query = "UPDATE mst_school_mat_price SET FLAG='D', DATE_UPDATED='" + today + "' WHERE SL_NO='" + sl_no + "'";
                c = c + stmt.executeUpdate(query);
                if (c > 0) {
                    con.commit();
                    JOptionPane.showMessageDialog(this, "Deleted successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
                    populate_material();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jbtnMDeleteActionPerformed

    private void jbtnIEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnIEditActionPerformed
        if (jtblItemDetails.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select an item to edit", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            item_no = Integer.parseInt(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 0).toString());
            jtxtItem.setText(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 1).toString());
            jcmbCategory.setSelectedItem(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 2).toString());
            jcmbGender.setSelectedItem(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 3).toString());
            jtblItem.setValueAt(Double.parseDouble(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 4).toString()), 0, 0);
            jtblItem.setValueAt(Double.parseDouble(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 5).toString()), 0, 1);
            jtblItem.setValueAt(Double.parseDouble(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 6).toString()), 0, 2);
            jtblItem.setValueAt(Double.parseDouble(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 7).toString()), 0, 3);
            jtblItem.setValueAt(Double.parseDouble(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 8).toString()), 0, 4);
            jtblItem.setValueAt(Double.parseDouble(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 9).toString()), 0, 5);
            jtxtICostPrice.setText(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 10).toString());
            jtxtISellingPrice.setText(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 11).toString());
            jcmbClassFrom.setSelectedItem(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 12).toString());
            jcmbClassTo.setSelectedItem(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 13).toString());
            jcmbButtonhole.setSelectedItem(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 14));
            jcmbSet.setSelectedItem(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 15));
        }
    }//GEN-LAST:event_jbtnIEditActionPerformed

    private void jbtnISaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnISaveActionPerformed
        if (item_no == 0) {
            JOptionPane.showMessageDialog(this, "Please select a record to update", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbSchool.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a school", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtItem.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter an item name", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbCategory.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a category", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtISellingPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a selling price", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblItem.getValueAt(0, 0) == null || jtblItem.getValueAt(0, 0).equals("")) {
            JOptionPane.showMessageDialog(this, "Please select enter a cutting charge", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblItem.getValueAt(0, 1) == null || jtblItem.getValueAt(0, 1).equals("")) {
            JOptionPane.showMessageDialog(this, "Please select enter a stitching charge", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblItem.getValueAt(0, 2) == null || jtblItem.getValueAt(0, 2).equals("")) {
            JOptionPane.showMessageDialog(this, "Please select enter a buttonhole charge", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblItem.getValueAt(0, 3) == null || jtblItem.getValueAt(0, 3).equals("")) {
            JOptionPane.showMessageDialog(this, "Please select enter an ironing charge", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblItem.getValueAt(0, 4) == null || jtblItem.getValueAt(0, 4).equals("")) {
            JOptionPane.showMessageDialog(this, "Please select enter a packing charge", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblItem.getValueAt(0, 5) == null || jtblItem.getValueAt(0, 5).equals("")) {
            JOptionPane.showMessageDialog(this, "Please select enter material extra", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbClassFrom.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a class from", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbClassTo.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a class to", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbSet.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a set name for the item", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                cat_id = 0;
                c = 0;
                setno = 0;
                if (jcmbButtonhole.getSelectedItem().equals("Yes")) {
                    bh = 1;
                } else if (jcmbButtonhole.getSelectedItem().equals("No")) {
                    bh = 0;
                }
                school = jcmbSchool.getSelectedItem().toString().split("   ");
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt = con.createStatement();
                query = "select cat_id from mst_category where cat_name = '" + jcmbCategory.getSelectedItem() + "' and flag!='D'";
                rs = stmt.executeQuery(query);
                if (rs.next()) {
                    cat_id = rs.getInt(1);
                }
                query = "select set_no from mst_set where set_name = '" + jcmbSet.getSelectedItem().toString() + "' and flag!='D'";
                rs = stmt.executeQuery(query);
                if (rs.next()) {
                    setno = rs.getInt(1);
                }
                query = "UPDATE mst_item SET ITEM_NAME = '" + jtxtItem.getText().trim() + "', FLAG = 'U', DATE_UPDATED = '" + today + "', CAT_ID = '" + cat_id + "',GENDER = '" + jcmbGender.getSelectedItem() + "',buttonhole = '" + bh + "' WHERE ITEM_NO ='" + item_no + "'";
                c = c + stmt.executeUpdate(query);

                query = "UPDATE mst_item_detail SET CUTTING_CHARGE='" + jtblItem.getValueAt(0, 0) + "', STITCHING_CHARGE = '" + jtblItem.getValueAt(0, 1) + "', BUTTON_CHARGE = '" + jtblItem.getValueAt(0, 2) + "', IRONING_CHARGE = '" + jtblItem.getValueAt(0, 3) + "', PACKING_CHARGE = '" + jtblItem.getValueAt(0, 4) + "', MATERIAL_EXTRA = '" + jtblItem.getValueAt(0, 5) + "', FLAG = 'U',DATE_UPDATED = '" + today + "' where item_no = '" + item_no + "' and year = '" + Global.year + "'";
                c = c + stmt.executeUpdate(query);

                query = "UPDATE mst_school_item_price SET SELLING_PRICE = '" + jtxtISellingPrice.getText().trim() + "',CLASS_FROM = '" + jcmbClassFrom.getSelectedItem() + "',CLASS_TO = '" + jcmbClassTo.getSelectedItem() + "',SET_NO = '" + setno + "', FLAG = 'U', DATE_UPDATED = '" + today + "' WHERE SCHOOL_NO = '" + school[0] + "' AND ITEM_NO = '" + item_no + "'";
                c = c + stmt.executeUpdate(query);

                if (c > 2) {
                    con.commit();
                    JOptionPane.showMessageDialog(this, "Edited successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
                    clear();
                    populate_item();
                    item_no = 0;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!rs.isClosed()) {
                        rs.close();
                    }
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }

        }
    }//GEN-LAST:event_jbtnISaveActionPerformed

    private void jbtnIDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnIDeleteActionPerformed
        if (item_no != 0) {
            JOptionPane.showMessageDialog(this, "Please complete the update before deleting the record", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtblItemDetails.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select an item to delete", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                item_no = Integer.parseInt(jtblItemDetails.getValueAt(jtblItemDetails.getSelectedRow(), 0).toString());
                con = new DBConnection().connect();
                con.setAutoCommit(false);
                stmt = con.createStatement();
                school = jcmbSchool.getSelectedItem().toString().split("   ");
                query = "UPDATE mst_item SET FLAG='D', DATE_UPDATED='" + today + "' WHERE ITEM_NO='" + item_no + "'";
                c = c + stmt.executeUpdate(query);

                query = "UPDATE mst_item_detail SET FLAG='D',DATE_UPDATED='" + today + "' where item_no = '" + item_no + "' and year = '" + Global.year + "'";
                c = c + stmt.executeUpdate(query);

                query = "UPDATE mst_school_item_price SET FLAG='D', DATE_UPDATED='" + today + "' WHERE SCHOOL_NO= '" + school[0] + "' AND ITEM_NO = '" + item_no + "'";
                c = c + stmt.executeUpdate(query);

                query = "UPDATE mst_school_mat_price SET FLAG='D',DATE_UPDATED='" + today + "' WHERE SCHOOL_NO= '" + school[0] + "' AND ITEM_NO = '" + item_no + "'";
                c = c + stmt.executeUpdate(query);

                if (c > 3) {
                    con.commit();
                    JOptionPane.showMessageDialog(this, "Deleted successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
                    clear();
                    populate_item();
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                try {
                    if (!con.isClosed()) {
                        con.close();
                    }
                    if (!stmt.isClosed()) {
                        stmt.isClosed();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jbtnIDeleteActionPerformed

    private void jbtnMEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnMEditActionPerformed
        if (jtblMaterialDetails.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select an item to edit", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            jbtnAdd.setVisible(false);
            jbtnMSave.setVisible(true);
            sl_no = Integer.parseInt(jtblMaterialDetails.getValueAt(jtblMaterialDetails.getSelectedRow(), 0).toString());
            jcmbMaterial.setSelectedItem(jtblMaterialDetails.getValueAt(jtblMaterialDetails.getSelectedRow(), 1) + "   " + jtblMaterialDetails.getValueAt(jtblMaterialDetails.getSelectedRow(), 2));
            jtxtMCostPrice.setText(jtblMaterialDetails.getValueAt(jtblMaterialDetails.getSelectedRow(), 3).toString());
            jtxtMSellingPrice.setText(jtblMaterialDetails.getValueAt(jtblMaterialDetails.getSelectedRow(), 4).toString());
        }
    }//GEN-LAST:event_jbtnMEditActionPerformed

    private void jbtnMSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnMSaveActionPerformed
        if (sl_no == 0) {
            JOptionPane.showMessageDialog(this, "Please select a record to update", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jcmbMaterial.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a material", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else if (jtxtMSellingPrice.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid selling price", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            c = JOptionPane.YES_OPTION;
            if (Integer.parseInt(jtxtMCostPrice.getText()) > Integer.parseInt(jtxtMSellingPrice.getText())) {
                c = JOptionPane.showConfirmDialog(this, "cost price is greater then selling price, do you want to continue?", "Info", JOptionPane.YES_NO_OPTION);
            }
            if (c == JOptionPane.YES_OPTION) {
                try {
                    c = 0;
                    material = jcmbMaterial.getSelectedItem().toString().split("   ");
                    con = new DBConnection().connect();
                    con.setAutoCommit(false);
                    stmt = con.createStatement();
                    query = "UPDATE mst_school_mat_price SET MATERIAL_NO='" + material[0] + "', SELLING_PRICE='" + jtxtMSellingPrice.getText().trim() + "', FLAG='U', DATE_UPDATED='" + today + "'  WHERE SL_NO = '" + sl_no + "'";
                    c = c + stmt.executeUpdate(query);
                    if (c > 0) {
                        con.commit();
                        JOptionPane.showMessageDialog(this, "Updated successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
                        populate_material();
                        sl_no = 0;
                        jcmbMaterial.setSelectedItem("");
                        jtxtMCostPrice.setText("");
                        jtxtMSellingPrice.setText("");
                        jbtnAdd.setVisible(true);
                        jbtnMSave.setVisible(false);
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } finally {
                    try {
                        if (!con.isClosed()) {
                            con.close();
                        }
                        if (!stmt.isClosed()) {
                            stmt.isClosed();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jbtnMSaveActionPerformed
    private void populate_item() {
        try {
            rowcount = model1.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model1.removeRow(0);
            }
            item_no = 0;
            con = new DBConnection().connect();
            stmt = con.createStatement();
            school = jcmbSchool.getSelectedItem().toString().split("   ");
            query = "select a.item_no,c.item_name,d.cat_name,c.gender,b.cutting_charge,b.stitching_charge,b.button_charge,b.ironing_charge,b.packing_charge,b.material_extra,b.cutting_charge+b.stitching_charge+b.button_charge+b.ironing_charge+b.packing_charge+b.material_extra as cp,a.selling_price,a.class_from,a.class_to,c.buttonhole,e.set_name from mst_school_item_price a join mst_item_detail b on a.item_no = b.item_no join mst_item c on a.item_no = c.item_no left join mst_category d on c.cat_id = d.cat_id left join mst_set e on a.set_no = e.set_no where a.school_no = '" + school[0] + "' and a.flag!='D' and b.flag!='D' and c.flag!='D' and d.flag!='D' and e.flag!='D'";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                rowcount = model1.getRowCount();
                model1.addRow(new Object[]{});
                jtblItemDetails.setValueAt(rs.getString(1), rowcount, 0);
                jtblItemDetails.setValueAt(rs.getString(2), rowcount, 1);
                jtblItemDetails.setValueAt(rs.getString(3), rowcount, 2);
                jtblItemDetails.setValueAt(rs.getString(4), rowcount, 3);
                jtblItemDetails.setValueAt(rs.getString(5), rowcount, 4);
                jtblItemDetails.setValueAt(rs.getString(6), rowcount, 5);
                jtblItemDetails.setValueAt(rs.getString(7), rowcount, 6);
                jtblItemDetails.setValueAt(rs.getString(8), rowcount, 7);
                jtblItemDetails.setValueAt(rs.getString(9), rowcount, 8);
                jtblItemDetails.setValueAt(rs.getString(10), rowcount, 9);
                jtblItemDetails.setValueAt(rs.getString(11), rowcount, 10);
                jtblItemDetails.setValueAt(rs.getString(12), rowcount, 11);
                jtblItemDetails.setValueAt(rs.getString(13), rowcount, 12);
                jtblItemDetails.setValueAt(rs.getString(14), rowcount, 13);
                if (rs.getString(15).equals("1")) {
                    jtblItemDetails.setValueAt("Yes", rowcount, 14);
                } else if (rs.getString(15).equals("0")) {
                    jtblItemDetails.setValueAt("No", rowcount, 14);
                }
                jtblItemDetails.setValueAt(rs.getString(16), rowcount, 15);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    private void populate_material() {
        try {
            rowcount = model3.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                model3.removeRow(0);
            }
            sl_no = 0;
            con = new DBConnection().connect();
            stmt = con.createStatement();
            school = jcmbSchool.getSelectedItem().toString().split("   ");
            query = "select a.sl_no,b.material_no,b.material_name,b.cost_price,a.selling_price from mst_school_mat_price a join mst_material b on a.material_no = b.material_no where a.school_no ='" + school[0] + "' and item_no = '" + item_no + "' and a.flag!='D' and b.flag!='D'";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                rowcount = model3.getRowCount();
                model3.addRow(new Object[]{""});
                jtblMaterialDetails.setValueAt(rs.getString(1), rowcount, 0);
                jtblMaterialDetails.setValueAt(rs.getString(2), rowcount, 1);
                jtblMaterialDetails.setValueAt(rs.getString(3), rowcount, 2);
                jtblMaterialDetails.setValueAt(rs.getString(4), rowcount, 3);
                jtblMaterialDetails.setValueAt(rs.getString(5), rowcount, 4);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                if (!rs.isClosed()) {
                    rs.close();
                }
                if (!con.isClosed()) {
                    con.close();
                }
                if (!stmt.isClosed()) {
                    stmt.isClosed();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jbtnAdd;
    private javax.swing.JButton jbtnIDelete;
    private javax.swing.JButton jbtnIEdit;
    private javax.swing.JButton jbtnISave;
    private javax.swing.JButton jbtnMDelete;
    private javax.swing.JButton jbtnMEdit;
    private javax.swing.JButton jbtnMSave;
    private javax.swing.JComboBox jcmbButtonhole;
    private javax.swing.JComboBox jcmbCategory;
    private javax.swing.JComboBox jcmbClassFrom;
    private javax.swing.JComboBox jcmbClassTo;
    private javax.swing.JComboBox jcmbGender;
    private javax.swing.JComboBox jcmbMaterial;
    private javax.swing.JComboBox jcmbSchool;
    private javax.swing.JComboBox jcmbSet;
    private javax.swing.JTable jtblItem;
    private javax.swing.JTable jtblItemDetails;
    private javax.swing.JTable jtblMaterialDetails;
    private javax.swing.JTextField jtxtICostPrice;
    private javax.swing.JTextField jtxtISellingPrice;
    private javax.swing.JTextField jtxtItem;
    private javax.swing.JTextField jtxtMCostPrice;
    private javax.swing.JTextField jtxtMSellingPrice;
    // End of variables declaration//GEN-END:variables
}
